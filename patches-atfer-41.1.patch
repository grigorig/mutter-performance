From c56d7bd32dca22d4bd77b39cea07c9f1d7b85ea4 Mon Sep 17 00:00:00 2001
From: Milo Casagrande <milo@milo.name>
Date: Wed, 10 Nov 2021 08:21:05 +0000
Subject: [PATCH 01/30] Update Italian translation

---
 po/it.po | 232 +++++++++++++++++++++++++++++++------------------------
 1 file changed, 129 insertions(+), 103 deletions(-)

diff --git a/po/it.po b/po/it.po
index aa85df33a1..02f27ac52d 100644
--- a/po/it.po
+++ b/po/it.po
@@ -12,8 +12,8 @@ msgid ""
 msgstr ""
 "Project-Id-Version: mutter\n"
 "Report-Msgid-Bugs-To: https://gitlab.gnome.org/GNOME/mutter/issues\n"
-"POT-Creation-Date: 2021-03-12 15:44+0000\n"
-"PO-Revision-Date: 2021-03-15 09:07+0100\n"
+"POT-Creation-Date: 2021-11-04 18:01+0000\n"
+"PO-Revision-Date: 2021-11-10 09:20+0100\n"
 "Last-Translator: Milo Casagrande <milo@milo.name>\n"
 "Language-Team: Italian <tp@lists.linux.it>\n"
 "Language: it\n"
@@ -21,7 +21,7 @@ msgstr ""
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
 "Plural-Forms: nplurals=2; plural=(n!=1);\n"
-"X-Generator: Poedit 2.4.2\n"
+"X-Generator: Poedit 3.0\n"
 
 #: data/50-mutter-navigation.xml:6
 msgid "Navigation"
@@ -55,110 +55,126 @@ msgstr "Sposta la finestra sullo spazio di lavoro a sinistra"
 msgid "Move window one workspace to the right"
 msgstr "Sposta la finestra sullo spazio di lavoro a destra"
 
-#: data/50-mutter-navigation.xml:30
+#: data/50-mutter-navigation.xml:31
+msgid "Move window one workspace up"
+msgstr "Sposta la finestra uno spazio di lavoro in alto"
+
+#: data/50-mutter-navigation.xml:35
+msgid "Move window one workspace down"
+msgstr "Sposta la finestra uno spazio di lavoro in basso"
+
+#: data/50-mutter-navigation.xml:38
 msgid "Move window one monitor to the left"
 msgstr "Sposta la finestra un monitor a sinistra"
 
-#: data/50-mutter-navigation.xml:33
+#: data/50-mutter-navigation.xml:41
 msgid "Move window one monitor to the right"
 msgstr "Sposta la finestra un monitor a destra"
 
-#: data/50-mutter-navigation.xml:36
+#: data/50-mutter-navigation.xml:44
 msgid "Move window one monitor up"
 msgstr "Sposta la finestra un monitor in su"
 
-#: data/50-mutter-navigation.xml:39
+#: data/50-mutter-navigation.xml:47
 msgid "Move window one monitor down"
 msgstr "Sposta la finestra un monitor in giù"
 
-#: data/50-mutter-navigation.xml:43
+#: data/50-mutter-navigation.xml:51
 msgid "Switch applications"
 msgstr "Evidenzia le applicazioni"
 
-#: data/50-mutter-navigation.xml:48
+#: data/50-mutter-navigation.xml:56
 msgid "Switch to previous application"
 msgstr "Evidenzia l'applicazione precedente"
 
-#: data/50-mutter-navigation.xml:52
+#: data/50-mutter-navigation.xml:60
 msgid "Switch windows"
 msgstr "Evidenzia le finestre"
 
-#: data/50-mutter-navigation.xml:57
+#: data/50-mutter-navigation.xml:65
 msgid "Switch to previous window"
 msgstr "Evidenzia la finestra precedente"
 
-#: data/50-mutter-navigation.xml:61
+#: data/50-mutter-navigation.xml:69
 msgid "Switch windows of an application"
 msgstr "Evidenzia le finestre di un'applicazione"
 
-#: data/50-mutter-navigation.xml:66
+#: data/50-mutter-navigation.xml:74
 msgid "Switch to previous window of an application"
 msgstr "Evidenzia la finestra precedente di un'applicazione"
 
-#: data/50-mutter-navigation.xml:70
+#: data/50-mutter-navigation.xml:78
 msgid "Switch system controls"
 msgstr "Evidenzia i controlli di sistema"
 
-#: data/50-mutter-navigation.xml:75
+#: data/50-mutter-navigation.xml:83
 msgid "Switch to previous system control"
 msgstr "Evidenzia i controlli di sistema precedenti"
 
-#: data/50-mutter-navigation.xml:79
+#: data/50-mutter-navigation.xml:87
 msgid "Switch windows directly"
 msgstr "Evidenzia direttamente le finestre"
 
-#: data/50-mutter-navigation.xml:84
+#: data/50-mutter-navigation.xml:92
 msgid "Switch directly to previous window"
 msgstr "Evidenzia direttamente la finestra precedente"
 
-#: data/50-mutter-navigation.xml:88
+#: data/50-mutter-navigation.xml:96
 msgid "Switch windows of an app directly"
 msgstr "Evidenzia direttamente le finestre di un'applicazione"
 
-#: data/50-mutter-navigation.xml:93
+#: data/50-mutter-navigation.xml:101
 msgid "Switch directly to previous window of an app"
 msgstr "Evidenzia direttamente la finestra precedente di un'applicazione"
 
-#: data/50-mutter-navigation.xml:97
+#: data/50-mutter-navigation.xml:105
 msgid "Switch system controls directly"
 msgstr "Evidenzia direttamente i controlli di sistema"
 
-#: data/50-mutter-navigation.xml:102
+#: data/50-mutter-navigation.xml:110
 msgid "Switch directly to previous system control"
 msgstr "Evidenzia direttamente i controlli di sistema precedenti"
 
-#: data/50-mutter-navigation.xml:105
+#: data/50-mutter-navigation.xml:113
 msgid "Hide all normal windows"
 msgstr "Nasconde tutte le finestre normali"
 
-#: data/50-mutter-navigation.xml:108
+#: data/50-mutter-navigation.xml:116
 msgid "Switch to workspace 1"
 msgstr "Passa allo spazio di lavoro 1"
 
-#: data/50-mutter-navigation.xml:111
+#: data/50-mutter-navigation.xml:119
 msgid "Switch to workspace 2"
 msgstr "Passa allo spazio di lavoro 2"
 
-#: data/50-mutter-navigation.xml:114
+#: data/50-mutter-navigation.xml:122
 msgid "Switch to workspace 3"
 msgstr "Passa allo spazio di lavoro 3"
 
-#: data/50-mutter-navigation.xml:117
+#: data/50-mutter-navigation.xml:125
 msgid "Switch to workspace 4"
 msgstr "Passa allo spazio di lavoro 4"
 
-#: data/50-mutter-navigation.xml:120
+#: data/50-mutter-navigation.xml:128
 msgid "Switch to last workspace"
 msgstr "Passa all'ultimo spazio di lavoro"
 
-#: data/50-mutter-navigation.xml:123
+#: data/50-mutter-navigation.xml:131
 msgid "Move to workspace on the left"
 msgstr "Sposta su spazio di lavoro a sinistra"
 
-#: data/50-mutter-navigation.xml:126
+#: data/50-mutter-navigation.xml:134
 msgid "Move to workspace on the right"
 msgstr "Sposta su spazio di lavoro a destra"
 
+#: data/50-mutter-navigation.xml:138
+msgid "Move to workspace above"
+msgstr "Sposta su spazio di lavoro in alto"
+
+#: data/50-mutter-navigation.xml:142
+msgid "Move to workspace below"
+msgstr "Sposta su spazio di lavoro in basso"
+
 #: data/50-mutter-system.xml:6 data/50-mutter-wayland.xml:6
 msgid "System"
 msgstr "Sistema"
@@ -167,10 +183,6 @@ msgstr "Sistema"
 msgid "Show the run command prompt"
 msgstr "Mostra il prompt esegui comando"
 
-#: data/50-mutter-system.xml:10
-msgid "Show the activities overview"
-msgstr "Mostra la panoramica delle attività"
-
 #: data/50-mutter-wayland.xml:8
 msgid "Restore the keyboard shortcuts"
 msgstr "Ripristina le scorciatoie da tastiera"
@@ -425,10 +437,11 @@ msgstr ""
 "al contenuto della finestra, per gestire schermi HiDPI (non richiede il "
 "riavvio). • “rt-scheduler” — Richiede uno scheduling real-time a bassa "
 "priorità. L'eseguibile o l'utente deve avere la proprietà CAP_SYS_NICE "
-"(richiede il riavvio). • “autostart-xwayland” — Avvia Xwayland passivamente "
-"se ci sono client X11 (richiede il riavvio). • “autoclose-xwayland” — "
-"Termina automaticamente Xwayland se non ci sono più client X11 (non richiede "
-"il riavvio)."
+"(richiede il riavvio). • “dma-buf-screen-sharing” — Abilita la condivisione "
+"schermo DMA con buffer; già abilitato quando si usa il driver i915, ma "
+"disabilitato per tutto il resto (richiede il riavvio). • “autoclose-"
+"xwayland” — Termina automaticamente Xwayland se non ci sono più client X11 "
+"(non richiede il riavvio)."
 
 #: data/org.gnome.mutter.gschema.xml.in:143
 msgid "Modifier to use to locate the pointer"
@@ -594,26 +607,26 @@ msgstr ""
 "selezionate. Affinché questa impostazione abbia effetto è necessario "
 "riavviarae Xwayland."
 
-#: src/backends/meta-monitor.c:235
+#: src/backends/meta-monitor.c:246
 msgid "Built-in display"
 msgstr "Display integrato"
 
-#: src/backends/meta-monitor.c:264
+#: src/backends/meta-monitor.c:275
 msgid "Unknown"
 msgstr "Sconosciuto"
 
-#: src/backends/meta-monitor.c:266
+#: src/backends/meta-monitor.c:277
 msgid "Unknown Display"
 msgstr "Display sconosciuto"
 
-#: src/backends/meta-monitor.c:274
+#: src/backends/meta-monitor.c:285
 #, c-format
 msgctxt ""
 "This is a monitor vendor name, followed by a size in inches, like 'Dell 15\"'"
 msgid "%s %s"
 msgstr "%s %s"
 
-#: src/backends/meta-monitor.c:282
+#: src/backends/meta-monitor.c:293
 #, c-format
 msgctxt ""
 "This is a monitor vendor name followed by product/model name where size in "
@@ -626,9 +639,26 @@ msgstr "%s %s"
 msgid "Compositor"
 msgstr "Compositor"
 
+#: src/backends/x11/meta-clutter-backend-x11.c:237
+msgid "X display to use"
+msgstr "Display X da usare"
+
+#: src/backends/x11/meta-clutter-backend-x11.c:243
+msgid "X screen to use"
+msgstr "Schermo X da usare"
+
+#: src/backends/x11/meta-clutter-backend-x11.c:248
+#: src/core/meta-context-main.c:585
+msgid "Make X calls synchronous"
+msgstr "Rende le chiamate X sincrone"
+
+#: src/backends/x11/meta-clutter-backend-x11.c:254
+msgid "Disable XInput support"
+msgstr "Disabilita supporto XInput"
+
 #. This probably means that a non-WM compositor like xcompmgr is running;
 #. * we have no way to get it to exit
-#: src/compositor/compositor.c:510
+#: src/compositor/compositor.c:513
 #, c-format
 msgid ""
 "Another compositing manager is already running on screen %i on display “%s”."
@@ -640,92 +670,88 @@ msgstr ""
 msgid "Bell event"
 msgstr "Evento campanella"
 
-#: src/core/main.c:233
-msgid "Disable connection to session manager"
-msgstr "Disabilita la connessione al gestore di sessione"
+#. Translators: %s is a window title
+#: src/core/meta-close-dialog-default.c:151
+#, c-format
+msgid "“%s” is not responding."
+msgstr "Nessuna risposta da %s."
+
+#: src/core/meta-close-dialog-default.c:153
+msgid "Application is not responding."
+msgstr "L'applicazione non risponde."
+
+#: src/core/meta-close-dialog-default.c:158
+msgid ""
+"You may choose to wait a short while for it to continue or force the "
+"application to quit entirely."
+msgstr ""
+"È possibile scegliere di attendere un po' lasciando che l'applicazione "
+"continui, oppure forzare la terminazione dell'applicazione."
+
+#: src/core/meta-close-dialog-default.c:165
+msgid "_Force Quit"
+msgstr "_Forza uscita"
+
+#: src/core/meta-close-dialog-default.c:165
+msgid "_Wait"
+msgstr "_Attendi"
 
-#: src/core/main.c:239
+#: src/core/meta-context-main.c:555
 msgid "Replace the running window manager"
 msgstr "Sostituisce il window manager in esecuzione"
 
-#: src/core/main.c:245
-msgid "Specify session management ID"
-msgstr "Specifica l'ID di gestione sessione"
-
-#: src/core/main.c:250
+#: src/core/meta-context-main.c:561
 msgid "X Display to use"
 msgstr "Display X da usare"
 
-#: src/core/main.c:256
+#: src/core/meta-context-main.c:567
+msgid "Disable connection to session manager"
+msgstr "Disabilita la connessione al gestore di sessione"
+
+#: src/core/meta-context-main.c:573
+msgid "Specify session management ID"
+msgstr "Specifica l'ID di gestione sessione"
+
+#: src/core/meta-context-main.c:579
 msgid "Initialize session from savefile"
 msgstr "Inizializza la sessione da file salvato"
 
-#: src/core/main.c:262
-msgid "Make X calls synchronous"
-msgstr "Rende le chiamate X sincrone"
-
-#: src/core/main.c:269
+#: src/core/meta-context-main.c:592
 msgid "Run as a wayland compositor"
 msgstr "Esegui come compositor Wayland"
 
-#: src/core/main.c:275
+#: src/core/meta-context-main.c:598
 msgid "Run as a nested compositor"
 msgstr "Esegui come compositor annidato"
 
-#: src/core/main.c:281
+#: src/core/meta-context-main.c:604
 msgid "Run wayland compositor without starting Xwayland"
 msgstr "Esegui il compositor Wayland senza avviare Xwayland"
 
-#: src/core/main.c:287
+#: src/core/meta-context-main.c:610
 msgid "Specify Wayland display name to use"
 msgstr "Specifica il nome del display Wayland da utilizzare"
 
-#: src/core/main.c:295
+#: src/core/meta-context-main.c:618
 msgid "Run as a full display server, rather than nested"
 msgstr "Esegui come display server invece che annidato"
 
-#: src/core/main.c:300
+#: src/core/meta-context-main.c:623
 msgid "Run as a headless display server"
 msgstr "Esegue come display server headless"
 
-#: src/core/main.c:305
+#: src/core/meta-context-main.c:628
 msgid "Add persistent virtual monitor (WxH or WxH@R)"
 msgstr "Aggiunge un monitor virtuale persistente (WxH o WxH@R)"
 
-#: src/core/main.c:311
+#: src/core/meta-context-main.c:639
 msgid "Run with X11 backend"
 msgstr "Esegui con sistema X11"
 
-#. Translators: %s is a window title
-#: src/core/meta-close-dialog-default.c:151
-#, c-format
-msgid "“%s” is not responding."
-msgstr "Nessuna risposta da %s."
-
-#: src/core/meta-close-dialog-default.c:153
-msgid "Application is not responding."
-msgstr "L'applicazione non risponde."
-
-#: src/core/meta-close-dialog-default.c:158
-msgid ""
-"You may choose to wait a short while for it to continue or force the "
-"application to quit entirely."
-msgstr ""
-"È possibile scegliere di attendere un po' lasciando che l'applicazione "
-"continui, oppure forzare la terminazione dell'applicazione."
-
-#: src/core/meta-close-dialog-default.c:165
-msgid "_Force Quit"
-msgstr "_Forza uscita"
-
-#: src/core/meta-close-dialog-default.c:165
-msgid "_Wait"
-msgstr "_Attendi"
-
 #. TRANSLATORS: This string refers to a button that switches between
 #. * different modes.
 #.
-#: src/core/meta-pad-action-mapper.c:780
+#: src/core/meta-pad-action-mapper.c:782
 #, c-format
 msgid "Mode Switch (Group %d)"
 msgstr "Cambio modalità (gruppo %d)"
@@ -733,28 +759,28 @@ msgstr "Cambio modalità (gruppo %d)"
 #. TRANSLATORS: This string refers to an action, cycles drawing tablets'
 #. * mapping through the available outputs.
 #.
-#: src/core/meta-pad-action-mapper.c:803
+#: src/core/meta-pad-action-mapper.c:805
 msgid "Switch monitor"
 msgstr "Cambia monitor"
 
-#: src/core/meta-pad-action-mapper.c:805
+#: src/core/meta-pad-action-mapper.c:807
 msgid "Show on-screen help"
 msgstr "Mostra aiuto sullo schermo"
 
-#: src/core/mutter.c:46
+#: src/core/mutter.c:48
 msgid "Print version"
 msgstr "Stampa la versione"
 
-#: src/core/mutter.c:52
+#: src/core/mutter.c:54
 msgid "Mutter plugin to use"
 msgstr "Plugin Mutter da usare"
 
-#: src/core/prefs.c:1912
+#: src/core/prefs.c:1913
 #, c-format
 msgid "Workspace %d"
 msgstr "Spazio di lavoro %d"
 
-#: src/core/util.c:117
+#: src/core/util.c:148
 msgid "Mutter was compiled without support for verbose mode"
 msgstr ""
 "Mutter è stato compilato escludendo il supporto per la modalità prolissa"
@@ -764,7 +790,7 @@ msgstr ""
 msgid "Mode Switch: Mode %d"
 msgstr "Cambio modalità: modalità %d"
 
-#: src/x11/meta-x11-display.c:676
+#: src/x11/meta-x11-display.c:673
 #, c-format
 msgid ""
 "Display “%s” already has a window manager; try using the --replace option to "
@@ -773,16 +799,16 @@ msgstr ""
 "Il display «%s» ha già un window manager; provare a utilizzare l'opzione --"
 "replace per sostituirlo."
 
-#: src/x11/meta-x11-display.c:1097
+#: src/x11/meta-x11-display.c:1067
 msgid "Failed to initialize GDK"
 msgstr "Inizializzazione GDK non riuscita"
 
-#: src/x11/meta-x11-display.c:1121
+#: src/x11/meta-x11-display.c:1091
 #, c-format
 msgid "Failed to open X Window System display “%s”"
 msgstr "Apertura del display «%s» di X Window System non riuscita"
 
-#: src/x11/meta-x11-display.c:1204
+#: src/x11/meta-x11-display.c:1175
 #, c-format
 msgid "Screen %d on display “%s” is invalid"
 msgstr "Lo schermo %d sul display «%s» non è valido"
@@ -792,7 +818,7 @@ msgstr "Lo schermo %d sul display «%s» non è valido"
 msgid "Format %s not supported"
 msgstr "Formato %s non supportato"
 
-#: src/x11/session.c:1822
+#: src/x11/session.c:1845
 msgid ""
 "These windows do not support “save current setup” and will have to be "
 "restarted manually next time you log in."
-- 
2.33.1


From 3fb3eb46d6d89c7522a95d07cae835b9179839c8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Tue, 28 Sep 2021 10:53:55 +0200
Subject: [PATCH 02/30] plugins/default: Add env var to disable animations

Intended to be used by tests, as animations may interfere with testing.
Eventually, a dedicated test plugin should be added, but it is out of
scope for this branch.
---
 src/compositor/plugins/default.c | 78 +++++++++++++++++++++++++-------
 1 file changed, 62 insertions(+), 16 deletions(-)

diff --git a/src/compositor/plugins/default.c b/src/compositor/plugins/default.c
index 4a23d1457e..e3fbfb40cb 100644
--- a/src/compositor/plugins/default.c
+++ b/src/compositor/plugins/default.c
@@ -37,10 +37,20 @@
 #include "meta/util.h"
 #include "meta/window.h"
 
-#define DESTROY_TIMEOUT   100
-#define MINIMIZE_TIMEOUT  250
-#define MAP_TIMEOUT       250
-#define SWITCH_TIMEOUT    500
+typedef enum
+{
+  ANIMATION_DESTROY,
+  ANIMATION_MINIMIZE,
+  ANIMATION_MAP,
+  ANIMATION_SWITCH,
+} Animation;
+
+static unsigned int animation_durations[] = {
+  100, /* destroy */
+  250, /* minimize */
+  250, /* map */
+  500, /* switch */
+};
 
 #define ACTOR_DATA_KEY "MCCP-Default-actor-data"
 #define DISPLAY_TILE_PREVIEW_DATA_KEY "MCCP-Default-display-tile-preview-data"
@@ -256,10 +266,38 @@ get_actor_private (MetaWindowActor *actor)
   return priv;
 }
 
+static gboolean
+is_animations_disabled (void)
+{
+  static gboolean is_animations_disabled_set;
+  static gboolean is_animations_disabled;
+
+  if (!is_animations_disabled_set)
+    {
+      if (g_strcmp0 (getenv ("MUTTER_DEBUG_DISABLE_ANIMATIONS"), "1") == 0)
+        is_animations_disabled = TRUE;
+      else
+        is_animations_disabled = FALSE;
+
+      is_animations_disabled_set = TRUE;
+    }
+
+  return is_animations_disabled;
+}
+
+static unsigned int
+get_animation_duration (Animation animation)
+{
+  if (is_animations_disabled ())
+    return 0;
+
+  return animation_durations[animation];
+}
+
 static ClutterTimeline *
 actor_animate (ClutterActor         *actor,
                ClutterAnimationMode  mode,
-               guint                 duration,
+               Animation             animation,
                const gchar          *first_property,
                ...)
 {
@@ -268,7 +306,7 @@ actor_animate (ClutterActor         *actor,
 
   clutter_actor_save_easing_state (actor);
   clutter_actor_set_easing_mode (actor, mode);
-  clutter_actor_set_easing_duration (actor, duration);
+  clutter_actor_set_easing_duration (actor, get_animation_duration (animation));
 
   va_start (args, first_property);
   g_object_set_valist (G_OBJECT (actor), first_property, args);
@@ -537,7 +575,7 @@ switch_workspace (MetaPlugin *plugin,
   priv->desktop2 = workspace1;
 
   priv->tml_switch_workspace1 = actor_animate (workspace0, CLUTTER_EASE_IN_SINE,
-                                               SWITCH_TIMEOUT,
+                                               ANIMATION_SWITCH,
                                                "scale-x", 1.0,
                                                "scale-y", 1.0,
                                                NULL);
@@ -547,7 +585,7 @@ switch_workspace (MetaPlugin *plugin,
                     plugin);
 
   priv->tml_switch_workspace2 = actor_animate (workspace1, CLUTTER_EASE_IN_SINE,
-                                               SWITCH_TIMEOUT,
+                                               ANIMATION_SWITCH,
                                                "scale-x", 0.0,
                                                "scale-y", 0.0,
                                                NULL);
@@ -610,7 +648,7 @@ minimize (MetaPlugin *plugin, MetaWindowActor *window_actor)
     {
       timeline = actor_animate (actor,
                                 CLUTTER_EASE_IN_SINE,
-                                MINIMIZE_TIMEOUT,
+                                ANIMATION_MINIMIZE,
                                 "scale-x", 0.0,
                                 "scale-y", 0.0,
                                 "x", (double)icon_geometry.x,
@@ -677,16 +715,24 @@ map (MetaPlugin *plugin, MetaWindowActor *window_actor)
 
       apriv->tml_map = actor_animate (actor,
                                       CLUTTER_EASE_OUT_QUAD,
-                                      MAP_TIMEOUT,
+                                      ANIMATION_MAP,
                                       "opacity", 255,
                                       "scale-x", 1.0,
                                       "scale-y", 1.0,
                                       NULL);
-      data->actor = actor;
-      data->plugin = plugin;
-      g_signal_connect (apriv->tml_map, "completed",
-                        G_CALLBACK (on_map_effect_complete),
-                        data);
+      if (apriv->tml_map)
+        {
+          data->actor = actor;
+          data->plugin = plugin;
+          g_signal_connect (apriv->tml_map, "completed",
+                            G_CALLBACK (on_map_effect_complete),
+                            data);
+        }
+      else
+        {
+          g_free (data);
+          meta_plugin_map_completed (plugin, window_actor);
+        }
     }
   else
     meta_plugin_map_completed (plugin, window_actor);
@@ -725,7 +771,7 @@ destroy (MetaPlugin *plugin, MetaWindowActor *window_actor)
     {
       timeline = actor_animate (actor,
                                 CLUTTER_EASE_OUT_QUAD,
-                                DESTROY_TIMEOUT,
+                                ANIMATION_DESTROY,
                                 "opacity", 0,
                                 "scale-x", 0.8,
                                 "scale-y", 0.8,
-- 
2.33.1


From 4c2b96cfb0011f08129ea4182618c6632a4cd7f7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Tue, 28 Sep 2021 10:56:11 +0200
Subject: [PATCH 03/30] tests/stage-view: Disable animations

Animations may interfere with test cases, e.g. by triggering relayouts,
repaints, when not expected. Disable them, so that more precise test
cases can be added.
---
 src/tests/stage-view-tests.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/tests/stage-view-tests.c b/src/tests/stage-view-tests.c
index 2ce8003335..dbf2476cbc 100644
--- a/src/tests/stage-view-tests.c
+++ b/src/tests/stage-view-tests.c
@@ -1288,6 +1288,8 @@ main (int argc, char *argv[])
 {
   g_autoptr (MetaContext) context = NULL;
 
+  g_setenv ("MUTTER_DEBUG_DISABLE_ANIMATIONS", "1", TRUE);
+
   context = meta_create_test_context (META_CONTEXT_TEST_TYPE_NESTED,
                                       META_CONTEXT_TEST_FLAG_TEST_CLIENT);
   g_assert (meta_context_configure (context, &argc, &argv, NULL));
-- 
2.33.1


From 1e49ab813cd0f82149f04afaeec9ff1c6eb9d38b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Tue, 28 Sep 2021 11:39:38 +0200
Subject: [PATCH 04/30] tests/stage-view: Verify stage view list length after
 updating

---
 src/tests/stage-view-tests.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/tests/stage-view-tests.c b/src/tests/stage-view-tests.c
index dbf2476cbc..abb2cebb09 100644
--- a/src/tests/stage-view-tests.c
+++ b/src/tests/stage-view-tests.c
@@ -1063,12 +1063,14 @@ static void
 ensure_view_count (int n_views)
 {
   MetaBackend *backend = meta_get_backend ();
+  ClutterActor *stage = meta_backend_get_stage (backend);
   MetaMonitorManager *monitor_manager =
     meta_backend_get_monitor_manager (backend);
   MetaMonitorManagerTest *monitor_manager_test =
     META_MONITOR_MANAGER_TEST (monitor_manager);
   MonitorTestCaseSetup test_case_setup;
   MetaMonitorTestSetup *test_setup;
+  GList *stage_views;
 
   test_case_setup = initial_test_case_setup;
   test_case_setup.n_outputs = n_views;
@@ -1076,6 +1078,9 @@ ensure_view_count (int n_views)
   test_setup = create_monitor_test_setup (&test_case_setup,
                                           MONITOR_TEST_FLAG_NO_STORED);
   meta_monitor_manager_test_emulate_hotplug (monitor_manager_test, test_setup);
+
+  stage_views = clutter_stage_peek_stage_views (CLUTTER_STAGE (stage));
+  g_assert_cmpuint (g_list_length (stage_views), ==, n_views);
 }
 
 static gboolean
-- 
2.33.1


From 4adf025ebba9d837a59b45b19b965e6db0a03371 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Tue, 28 Sep 2021 11:26:25 +0200
Subject: [PATCH 05/30] clutter/actor: First clear all stage views before
 emitting they changed

If one would end up with an actor attached to mapped actor, where the
attached actor doesn't itself have an up to date stage view list while
listening on the stage for updating, when clearing the stage views of
the list, anything that would query the stage views list at this time
would end up accessing freed memory.

This could happen if

 1) An actor was added to a newly created container actor attached to
    the stage
 2) The actor got a timeline attached to it
 3) The actor was moved to a container that already was mapped
 4) A hotplug happened

After (1) both the container and actor would not have any stage views.
After (2) the timeline would listen on the stage for stage views
updates. After (3) the actor would still listen on the stage for stage
views updates. When (4) happened, the actor would be signalled when the
stage got its stage view cleared, at which point it would traverse up
its actor's tree finding an appropriate stage view to base its animation
on. The problem here would be that it'd query the already mapped
container and its yet-to-be-cleared stage view list, resulting in
use-after free, resulting in for example the following backtrace:

  0)  g_type_check_instance_cast ()
  1)  CLUTTER_STAGE_VIEW ()
  2)  clutter_actor_pick_frame_clock ()
  3)  clutter_actor_pick_frame_clock ()
  4)  update_frame_clock ()
  5)  on_frame_clock_actor_stage_views_changed ()
  6)  g_closure_invoke ()
  7)  signal_emit_unlocked_R ()
  8)  g_signal_emit_valist ()
  9)  g_signal_emit ()
  10) clear_stage_views_cb ()
  11) _clutter_actor_traverse_depth ()
  12) _clutter_actor_traverse ()
  13) clutter_actor_clear_stage_views_recursive ()
  14) clutter_stage_clear_stage_views ()
  ...

Avoid this issue by making sure that we don't emit 'stage-views-changed'
signals while the actor tree is in an invalid state. While we now end up
traversing tree twice, it doesn't change the Big-O notation. It has not
been measured whether this has any noticible performance impact.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1950
---
 clutter/clutter/clutter-actor.c | 24 +++++++++++++--
 src/tests/stage-view-tests.c    | 53 +++++++++++++++++++++++++++++++++
 2 files changed, 75 insertions(+), 2 deletions(-)

diff --git a/clutter/clutter/clutter-actor.c b/clutter/clutter/clutter-actor.c
index b8814009f1..929ac7b63e 100644
--- a/clutter/clutter/clutter-actor.c
+++ b/clutter/clutter/clutter-actor.c
@@ -842,6 +842,7 @@ struct _ClutterActorPrivate
   guint needs_paint_volume_update   : 1;
   guint had_effects_on_last_paint_volume_update : 1;
   guint needs_update_stage_views    : 1;
+  guint clear_stage_views_needs_stage_views_changed : 1;
 };
 
 enum
@@ -15670,7 +15671,21 @@ clear_stage_views_cb (ClutterActor *actor,
   old_stage_views = g_steal_pointer (&actor->priv->stage_views);
 
   if (old_stage_views)
-    g_signal_emit (actor, actor_signals[STAGE_VIEWS_CHANGED], 0);
+    actor->priv->clear_stage_views_needs_stage_views_changed = TRUE;
+
+  return CLUTTER_ACTOR_TRAVERSE_VISIT_CONTINUE;
+}
+
+static ClutterActorTraverseVisitFlags
+maybe_emit_stage_views_changed_cb (ClutterActor *actor,
+                                   int           depth,
+                                   gpointer      user_data)
+{
+  if (actor->priv->clear_stage_views_needs_stage_views_changed)
+    {
+      actor->priv->clear_stage_views_needs_stage_views_changed = FALSE;
+      g_signal_emit (actor, actor_signals[STAGE_VIEWS_CHANGED], 0);
+    }
 
   return CLUTTER_ACTOR_TRAVERSE_VISIT_CONTINUE;
 }
@@ -15683,6 +15698,11 @@ clutter_actor_clear_stage_views_recursive (ClutterActor *self)
                            clear_stage_views_cb,
                            NULL,
                            NULL);
+  _clutter_actor_traverse (self,
+                           CLUTTER_ACTOR_TRAVERSE_DEPTH_FIRST,
+                           maybe_emit_stage_views_changed_cb,
+                           NULL,
+                           NULL);
 }
 
 float
@@ -15995,7 +16015,7 @@ clutter_actor_pick_frame_clock (ClutterActor  *self,
 
   for (l = stage_views_list; l; l = l->next)
     {
-      ClutterStageView *view = l->data;
+      ClutterStageView *view = CLUTTER_STAGE_VIEW (l->data);
       float refresh_rate;
 
       refresh_rate = clutter_stage_view_get_refresh_rate (view);
diff --git a/src/tests/stage-view-tests.c b/src/tests/stage-view-tests.c
index abb2cebb09..198b6cd495 100644
--- a/src/tests/stage-view-tests.c
+++ b/src/tests/stage-view-tests.c
@@ -1255,6 +1255,57 @@ meta_test_timeline_actor_destroyed (void)
   clutter_actor_destroy (persistent_actor);
 }
 
+static void
+meta_test_timeline_actor_tree_clear (void)
+{
+  ClutterActor *stage;
+  ClutterActor *container1;
+  ClutterActor *container2;
+  g_autoptr (ClutterActor) floating = NULL;
+  g_autoptr (ClutterTimeline) timeline = NULL;
+  GList *stage_views;
+
+  stage = meta_backend_get_stage (meta_context_get_backend (test_context));
+
+  ensure_view_count (1);
+
+  container1 = clutter_actor_new ();
+  clutter_actor_set_size (container1, 100, 100);
+  clutter_actor_add_child (stage, container1);
+
+  wait_for_paint (stage);
+
+  container2 = clutter_actor_new ();
+  clutter_actor_set_size (container2, 100, 100);
+  clutter_actor_add_child (stage, container2);
+
+  floating = g_object_ref_sink (clutter_actor_new ());
+  clutter_actor_set_size (floating, 100, 100);
+
+  clutter_actor_add_child (container2, floating);
+  timeline = clutter_timeline_new_for_actor (floating, 100);
+  clutter_actor_remove_child (container2, floating);
+
+  clutter_actor_add_child (container1, floating);
+
+  ensure_view_count (1);
+
+  is_on_stage_views (container1, 0);
+  is_on_stage_views (container2, 0);
+  is_on_stage_views (floating, 0);
+
+  wait_for_paint (stage);
+
+  stage_views = clutter_stage_peek_stage_views (CLUTTER_STAGE (stage));
+  is_on_stage_views (container1, 1, stage_views->data);
+  is_on_stage_views (container2, 1, stage_views->data);
+  is_on_stage_views (floating, 1, stage_views->data);
+
+  clutter_actor_destroy (floating);
+  clutter_actor_destroy (container1);
+  clutter_actor_destroy (container2);
+}
+
 static void
 init_tests (void)
 {
@@ -1286,6 +1337,8 @@ init_tests (void)
                    meta_test_actor_stage_views_queue_frame_drawn);
   g_test_add_func ("/stage-views/timeline/actor-destroyed",
                    meta_test_timeline_actor_destroyed);
+  g_test_add_func ("/stage-views/timeline/tree-clear",
+                   meta_test_timeline_actor_tree_clear);
 }
 
 int
-- 
2.33.1


From a421a9e8cd2a801b9f30bce3ab317000010b410b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 18 Nov 2021 17:15:57 +0100
Subject: [PATCH 06/30] kms/connector: Fix updating the state when drmConnector
 is NULL

When a docking station is disconnected, a few previously existing DRM
connectors may now be gone. When this happens, getting them via the
libdrm API results in NULL pointers returning, and we need to handle
this gracefully by making sure the connector state is properly updated.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2097>
(cherry picked from commit 8546ca31ff91d5adcec6d5d028f8fcdeee239985)
---
 src/backends/native/meta-kms-connector.c | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/src/backends/native/meta-kms-connector.c b/src/backends/native/meta-kms-connector.c
index 5121dc94d8..4f1b38da59 100644
--- a/src/backends/native/meta-kms-connector.c
+++ b/src/backends/native/meta-kms-connector.c
@@ -138,7 +138,9 @@ sync_fd_held (MetaKmsConnector  *connector,
 {
   gboolean should_hold_fd;
 
-  should_hold_fd = connector->current_state->current_crtc_id != 0;
+  should_hold_fd =
+    connector->current_state &&
+    connector->current_state->current_crtc_id != 0;
 
   if (connector->fd_held == should_hold_fd)
     return;
@@ -569,6 +571,13 @@ meta_kms_connector_read_state (MetaKmsConnector  *connector,
   current_state = g_steal_pointer (&connector->current_state);
   changes = META_KMS_UPDATE_CHANGE_NONE;
 
+  if (!drm_connector)
+    {
+      if (current_state)
+        changes = META_KMS_UPDATE_CHANGE_FULL;
+      goto out;
+    }
+
   if (drm_connector->connection != DRM_MODE_CONNECTED)
     {
       if (drm_connector->connection != connector->connection)
@@ -577,7 +586,7 @@ meta_kms_connector_read_state (MetaKmsConnector  *connector,
           changes |= META_KMS_UPDATE_CHANGE_FULL;
         }
 
-      return changes;
+      goto out;
     }
 
   state = meta_kms_connector_state_new ();
@@ -616,8 +625,8 @@ meta_kms_connector_read_state (MetaKmsConnector  *connector,
       changes |= connector_changes;
     }
 
-  if (changes != META_KMS_UPDATE_CHANGE_NONE)
-    sync_fd_held (connector, impl_device);
+out:
+  sync_fd_held (connector, impl_device);
 
   return changes;
 }
@@ -634,13 +643,10 @@ meta_kms_connector_update_state (MetaKmsConnector *connector,
   drm_connector = drmModeGetConnector (meta_kms_impl_device_get_fd (impl_device),
                                        connector->id);
 
-  if (!drm_connector)
-    return META_KMS_UPDATE_CHANGE_FULL;
-
   changes = meta_kms_connector_read_state (connector, impl_device,
                                            drm_connector,
                                            drm_resources);
-  drmModeFreeConnector (drm_connector);
+  g_clear_pointer (&drm_connector, drmModeFreeConnector);
 
   return changes;
 }
-- 
2.33.1


From 81dbcf2953bb45178492b94dcf28069672f36a17 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 18 Nov 2021 17:18:12 +0100
Subject: [PATCH 07/30] kms/crtc: Always log whether we updated CRTC state

Change a few early-outs to handle the state changes without returning.
This means we'll get to log the result in all cases, which might help
debugging.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2097>
(cherry picked from commit c765730af7ce1d062fd0680a59393d742fc95f43)
---
 src/backends/native/meta-kms-crtc.c | 31 +++++++++++++----------------
 1 file changed, 14 insertions(+), 17 deletions(-)

diff --git a/src/backends/native/meta-kms-crtc.c b/src/backends/native/meta-kms-crtc.c
index 3e05060263..4599f4455f 100644
--- a/src/backends/native/meta-kms-crtc.c
+++ b/src/backends/native/meta-kms-crtc.c
@@ -125,6 +125,9 @@ static MetaKmsUpdateChanges
 meta_kms_crtc_state_changes (MetaKmsCrtcState *state,
                              MetaKmsCrtcState *other_state)
 {
+  if (state->is_active != other_state->is_active)
+    return META_KMS_UPDATE_CHANGE_FULL;
+
   if (!meta_rectangle_equal (&state->rect, &other_state->rect))
     return META_KMS_UPDATE_CHANGE_FULL;
 
@@ -214,35 +217,29 @@ meta_kms_crtc_read_state (MetaKmsCrtc             *crtc,
       crtc_state.is_active = drm_crtc->mode_valid;
     }
 
-  if (crtc_state.is_active != crtc->current_state.is_active)
-    {
-      changes |= META_KMS_UPDATE_CHANGE_FULL;
-    }
-  else if (!crtc_state.is_active)
+  if (!crtc_state.is_active)
     {
-      clear_gamma_state (&crtc_state);
-      return changes;
+      if (crtc->current_state.is_active)
+        changes |= META_KMS_UPDATE_CHANGE_FULL;
     }
-
-  read_gamma_state (crtc, &crtc_state, impl_device, drm_crtc);
-
-  changes |= meta_kms_crtc_state_changes (&crtc->current_state, &crtc_state);
-
-  if (changes == META_KMS_UPDATE_CHANGE_NONE)
+  else
     {
-      clear_gamma_state (&crtc_state);
-      return changes;
+      read_gamma_state (crtc, &crtc_state, impl_device, drm_crtc);
+      changes = meta_kms_crtc_state_changes (&crtc->current_state, &crtc_state);
     }
 
   clear_gamma_state (&crtc->current_state);
   crtc->current_state = crtc_state;
 
   meta_topic (META_DEBUG_KMS,
-              "Read CRTC %u state: active: %d, mode: %s",
+              "Read CRTC %u state: active: %d, mode: %s, changed: %s",
               crtc->id, crtc->current_state.is_active,
               crtc->current_state.is_drm_mode_valid
                 ? crtc->current_state.drm_mode.name
-                : "(nil)");
+                : "(nil)",
+              changes == META_KMS_UPDATE_CHANGE_NONE
+                ? "no"
+                : "yes");
 
   return changes;
 }
-- 
2.33.1


From e2a62d0f89aab878cc9b88c5f873039ffe9755e4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 18 Nov 2021 17:34:40 +0100
Subject: [PATCH 08/30] kms/impl-device: Report 'full' change if we removed
 connectors

If some connectors disappeared, but the rest didn't change, we missed
actually removing the ones that disappeared, as we incorrectly assumed
nothing changed. Fix this by only assuming nothing changed if 1) we
didn't add any connector, and 2) we have the same amount of connectors
as before the hotplug event. The connector comparison checking makes
sure we report changes if anything of the still available connectors
changed.

Fixes: a8d11161b6b4967b770c9c28be2ff0e07567a5aa
Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/2007
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2097>
(cherry picked from commit cbdd62c19788d6972df5685a1ed31f2a690afb63)
---
 src/backends/native/meta-kms-impl-device.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/src/backends/native/meta-kms-impl-device.c b/src/backends/native/meta-kms-impl-device.c
index 94f7892eec..2f7922de94 100644
--- a/src/backends/native/meta-kms-impl-device.c
+++ b/src/backends/native/meta-kms-impl-device.c
@@ -396,7 +396,7 @@ update_connectors (MetaKmsImplDevice *impl_device,
   MetaKmsImplDevicePrivate *priv =
     meta_kms_impl_device_get_instance_private (impl_device);
   g_autolist (MetaKmsConnector) connectors = NULL;
-  gboolean needs_full_change = FALSE;
+  gboolean added_connector = FALSE;
   unsigned int i;
   int fd;
 
@@ -420,7 +420,7 @@ update_connectors (MetaKmsImplDevice *impl_device,
         {
           connector = meta_kms_connector_new (impl_device, drm_connector,
                                               drm_resources);
-          needs_full_change = TRUE;
+          added_connector = TRUE;
         }
 
       drmModeFreeConnector (drm_connector);
@@ -428,7 +428,8 @@ update_connectors (MetaKmsImplDevice *impl_device,
       connectors = g_list_prepend (connectors, connector);
     }
 
-  if (!needs_full_change)
+  if (!added_connector &&
+      g_list_length (connectors) == g_list_length (priv->connectors))
     return META_KMS_UPDATE_CHANGE_NONE;
 
   g_list_free_full (priv->connectors, g_object_unref);
-- 
2.33.1


From a1a8c7359cb72eeb529b93a1a87569f4ccd006b1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Nov 2021 10:37:52 +0100
Subject: [PATCH 09/30] core/close-dialog: Don't pass DISPLAY

We set it via setenv(), and might not have the MetaX11Display at hand.
This fixes a crash when the stuck-client dialog (using zenity) appears
without any X1 client having appeared.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2081>
(cherry picked from commit 734ae26ff7d5d27cd223502af985ab0a1c8e29ed)
---
 src/core/meta-close-dialog-default.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/core/meta-close-dialog-default.c b/src/core/meta-close-dialog-default.c
index 544a5b62d9..fb48e859bd 100644
--- a/src/core/meta-close-dialog-default.c
+++ b/src/core/meta-close-dialog-default.c
@@ -160,8 +160,7 @@ meta_close_dialog_default_show (MetaCloseDialog *dialog)
 
   dialog_pid =
     meta_show_dialog ("--question",
-                      window_content, NULL,
-                      window->display->x11_display->screen_name,
+                      window_content, NULL, NULL,
                       _("_Force Quit"), _("_Wait"),
                       "face-sad-symbolic", window->xwindow,
                       NULL, NULL);
-- 
2.33.1


From 96ac1f09ea00c2227a920130afb5bdd7fc4d7030 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Nov 2021 10:39:26 +0100
Subject: [PATCH 10/30] startup-notification: Fix naming of handle ID

It was named the same as the callback function itself, which was
confusing. ADd the `_id` suffix, which is the convention.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2081>
(cherry picked from commit a2cf75ccd55cb0216e059465b8f691e417291350)
---
 src/core/startup-notification.c | 19 +++++++++----------
 1 file changed, 9 insertions(+), 10 deletions(-)

diff --git a/src/core/startup-notification.c b/src/core/startup-notification.c
index 85a14e939c..630f2ff0da 100644
--- a/src/core/startup-notification.c
+++ b/src/core/startup-notification.c
@@ -90,7 +90,7 @@ struct _MetaStartupNotification
 
 
   GSList *startup_sequences;
-  guint startup_sequence_timeout;
+  guint startup_sequence_timeout_id;
 };
 
 typedef struct {
@@ -513,7 +513,7 @@ startup_sequence_timeout (void *data)
   else
     {
       /* remove */
-      sn->startup_sequence_timeout = 0;
+      sn->startup_sequence_timeout_id = 0;
       return FALSE;
     }
 }
@@ -521,16 +521,15 @@ startup_sequence_timeout (void *data)
 static void
 meta_startup_notification_ensure_timeout (MetaStartupNotification *sn)
 {
-  if (sn->startup_sequence_timeout != 0)
+  if (sn->startup_sequence_timeout_id != 0)
     return;
 
   /* our timeout just polls every second, instead of bothering
    * to compute exactly when we may next time out
    */
-  sn->startup_sequence_timeout = g_timeout_add_seconds (1,
-                                                        startup_sequence_timeout,
-                                                        sn);
-  g_source_set_name_by_id (sn->startup_sequence_timeout,
+  sn->startup_sequence_timeout_id =
+    g_timeout_add_seconds (1, startup_sequence_timeout, sn);
+  g_source_set_name_by_id (sn->startup_sequence_timeout_id,
                            "[mutter] startup_sequence_timeout");
 }
 
@@ -544,7 +543,7 @@ meta_startup_notification_remove_sequence (MetaStartupNotification *sn,
   g_signal_handlers_disconnect_by_func (seq, on_sequence_completed, sn);
 
   if (sn->startup_sequences == NULL)
-    g_clear_handle_id (&sn->startup_sequence_timeout, g_source_remove);
+    g_clear_handle_id (&sn->startup_sequence_timeout_id, g_source_remove);
 
   g_signal_emit (sn, sn_signals[CHANGED], 0, seq);
   g_object_unref (seq);
@@ -580,7 +579,7 @@ meta_startup_notification_finalize (GObject *object)
 {
   MetaStartupNotification *sn = META_STARTUP_NOTIFICATION (object);
 
-  g_clear_handle_id (&sn->startup_sequence_timeout, g_source_remove);
+  g_clear_handle_id (&sn->startup_sequence_timeout_id, g_source_remove);
 
   g_slist_free_full (sn->startup_sequences, g_object_unref);
   sn->startup_sequences = NULL;
@@ -634,7 +633,7 @@ meta_startup_notification_constructed (GObject *object)
   g_assert (sn->display != NULL);
 
   sn->startup_sequences = NULL;
-  sn->startup_sequence_timeout = 0;
+  sn->startup_sequence_timeout_id = 0;
 }
 
 static void
-- 
2.33.1


From 6057ee54a5f01dc73f163d419a28a70b7e0acfe1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Nov 2021 10:44:17 +0100
Subject: [PATCH 11/30] wayland/activation: Remove token from hash table on
 timeout

When an activation times out, we'll be signalled two signals on the
startup sequence object: "timeout", and "complete".

Normally, the "complete" signal is emitted when a startup sequence is
completed succesfully by it being used for activation, and in this case,
the xdg_activation implementation should remove the sequence from the
startup notification machinery.

However, in the timeout case, we should not remove it, as the startup
notification machinery itself will deal with this. If we would, we'd end
up with use-after-free issues, as the sequence would be finalized when
removed the first time.

To avoid this, just clean up the Wayland side in the "timeout" signal
handler, leaving the "complete" signal handler early out if it was
already handled by it.

This avoids crashes like:

  0) g_type_check_instance (type_instance=type_instance@entry=0xdd6740)
  1) g_signal_handlers_disconnect_matched (instance=0xdd6740, ...)
  2) meta_startup_notification_remove_sequence (sn=0x4cc890,
                                                seq=0xdd6740) at
       ../src/core/startup-notification.c:544
  3) startup_sequence_timeout (data=0x4cc890, ...) at
       ../src/core/startup-notification.c:504
  4) g_timeout_dispatch (...) at ../glib/gmain.c:4933

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2081>
(cherry picked from commit c41657bc4faf790a0f14e634490b7fffa844e0b4)
---
 src/wayland/meta-wayland-activation.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/src/wayland/meta-wayland-activation.c b/src/wayland/meta-wayland-activation.c
index 07bc1adaad..20fb1f1e98 100644
--- a/src/wayland/meta-wayland-activation.c
+++ b/src/wayland/meta-wayland-activation.c
@@ -51,6 +51,7 @@ struct _MetaXdgActivationToken
   char *token;
   uint32_t serial;
   gulong sequence_complete_id;
+  gulong sequence_timeout_id;
   gboolean committed;
 };
 
@@ -102,11 +103,23 @@ sequence_complete_cb (MetaStartupSequence    *sequence,
   MetaWaylandActivation *activation = token->activation;
   MetaDisplay *display = meta_get_display ();
 
+  if (!g_hash_table_contains (activation->tokens, token->token))
+    return;
+
   meta_startup_notification_remove_sequence (display->startup_notification,
                                              sequence);
   g_hash_table_remove (activation->tokens, token->token);
 }
 
+static void
+sequence_timeout_cb (MetaStartupSequence    *sequence,
+                     MetaXdgActivationToken *token)
+{
+  MetaWaylandActivation *activation = token->activation;
+
+  g_hash_table_remove (activation->tokens, token->token);
+}
+
 static char *
 create_startup_token (MetaWaylandActivation *activation,
                       MetaDisplay           *display)
@@ -158,6 +171,11 @@ token_commit (struct wl_client   *client,
                       "complete",
                       G_CALLBACK (sequence_complete_cb),
                       token);
+  token->sequence_timeout_id =
+    g_signal_connect (token->sequence,
+                      "timeout",
+                      G_CALLBACK (sequence_timeout_cb),
+                      token);
 
   meta_startup_notification_add_sequence (display->startup_notification,
                                           token->sequence);
@@ -188,6 +206,8 @@ meta_xdg_activation_token_free (MetaXdgActivationToken *token)
     {
       g_clear_signal_handler (&token->sequence_complete_id,
                               token->sequence);
+      g_clear_signal_handler (&token->sequence_timeout_id,
+                              token->sequence);
       g_clear_object (&token->sequence);
     }
 
-- 
2.33.1


From cb3788513b0a83758d833a00402124bdf822598b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Nov 2021 10:51:19 +0100
Subject: [PATCH 12/30] startup-notification: Fix source return value

Use G_SOURCE_CONTINUE and G_SOURCE_REMOVE intead of TRUE and FALSE.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2081>
(cherry picked from commit eed65998672cb8743e0efa07e3b8ae3d29fc148f)
---
 src/core/startup-notification.c | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/core/startup-notification.c b/src/core/startup-notification.c
index 630f2ff0da..1cc1e803d7 100644
--- a/src/core/startup-notification.c
+++ b/src/core/startup-notification.c
@@ -508,13 +508,12 @@ startup_sequence_timeout (void *data)
 
   if (sn->startup_sequences != NULL)
     {
-      return TRUE;
+      return G_SOURCE_CONTINUE;
     }
   else
     {
-      /* remove */
       sn->startup_sequence_timeout_id = 0;
-      return FALSE;
+      return G_SOURCE_REMOVE;
     }
 }
 
-- 
2.33.1


From 15813e8f9230e851d7074e3d41490f57227f381e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Nov 2021 10:52:48 +0100
Subject: [PATCH 13/30] tests: Split out Wayland tests into its own test case

Makes it easier to run it, as one doesn't need to wait for all the other
unit tests.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2081>
(cherry picked from commit d420a39a026644eb4d44c7c212f530a62a6e09d1)
---
 src/tests/meson.build          | 28 ++++++++++++++++++++++------
 src/tests/unit-tests.c         |  4 ----
 src/tests/wayland-unit-tests.c | 24 ++++++++++++++++++++----
 src/tests/wayland-unit-tests.h | 25 -------------------------
 4 files changed, 42 insertions(+), 39 deletions(-)
 delete mode 100644 src/tests/wayland-unit-tests.h

diff --git a/src/tests/meson.build b/src/tests/meson.build
index 3d0aec394c..9b8d48563a 100644
--- a/src/tests/meson.build
+++ b/src/tests/meson.build
@@ -131,8 +131,6 @@ unit_tests = executable('mutter-test-unit-tests',
     'unit-tests.c',
     'boxes-tests.c',
     'boxes-tests.h',
-    'meta-wayland-test-driver.c',
-    'meta-wayland-test-driver.h',
     'meta-gpu-test.c',
     'meta-gpu-test.h',
     'monitor-config-migration-unit-tests.c',
@@ -146,10 +144,6 @@ unit_tests = executable('mutter-test-unit-tests',
     'monitor-unit-tests.c',
     'orientation-manager-unit-tests.c',
     'monitor-unit-tests.h',
-    'wayland-unit-tests.c',
-    'wayland-unit-tests.h',
-    test_driver_server_header,
-    test_driver_protocol_code,
   ],
   include_directories: tests_includes,
   c_args: tests_c_args,
@@ -182,6 +176,21 @@ stage_view_tests = executable('mutter-stage-view-tests',
   install_dir: mutter_installed_tests_libexecdir,
 )
 
+wayland_tests = executable('mutter-wayland-tests',
+  sources: [
+    'meta-wayland-test-driver.c',
+    'meta-wayland-test-driver.h',
+    'wayland-unit-tests.c',
+    test_driver_server_header,
+    test_driver_protocol_code,
+  ],
+  include_directories: tests_includes,
+  c_args: tests_c_args,
+  dependencies: libmutter_test_dep,
+  install: have_installed_tests,
+  install_dir: mutter_installed_tests_libexecdir,
+)
+
 anonymous_file_test = executable('anonymous-file-tests',
   sources: [
     'anonymous-file.c',
@@ -327,6 +336,13 @@ test('stage-view', stage_view_tests,
   timeout: 60,
 )
 
+test('wayland', wayland_tests,
+  suite: ['core', 'mutter/unit'],
+  env: test_env,
+  is_parallel: false,
+  timeout: 60,
+)
+
 test('anonymous-file', anonymous_file_test,
   suite: ['core', 'mutter/unit'],
   env: test_env,
diff --git a/src/tests/unit-tests.c b/src/tests/unit-tests.c
index 20f965ce4d..0dba16535c 100644
--- a/src/tests/unit-tests.c
+++ b/src/tests/unit-tests.c
@@ -37,7 +37,6 @@
 #include "tests/monitor-transform-tests.h"
 #include "tests/meta-test-utils.h"
 #include "tests/orientation-manager-unit-tests.h"
-#include "tests/wayland-unit-tests.h"
 
 MetaContext *test_context;
 
@@ -232,7 +231,6 @@ init_tests (void)
   init_monitor_config_migration_tests ();
   init_monitor_tests ();
   init_boxes_tests ();
-  init_wayland_tests ();
   init_monitor_transform_tests ();
   init_orientation_manager_tests ();
 }
@@ -252,8 +250,6 @@ main (int argc, char *argv[])
 
   g_signal_connect (context, "before-tests",
                     G_CALLBACK (pre_run_monitor_tests), NULL);
-  g_signal_connect (context, "before-tests",
-                    G_CALLBACK (pre_run_wayland_tests), NULL);
   g_signal_connect (context, "after-tests",
                     G_CALLBACK (finish_monitor_tests), NULL);
 
diff --git a/src/tests/wayland-unit-tests.c b/src/tests/wayland-unit-tests.c
index 9dd3831c6d..f7a5d15d08 100644
--- a/src/tests/wayland-unit-tests.c
+++ b/src/tests/wayland-unit-tests.c
@@ -17,12 +17,11 @@
 
 #include "config.h"
 
-#include "tests/wayland-unit-tests.h"
-
 #include <gio/gio.h>
 
 #include "core/display-private.h"
 #include "core/window-private.h"
+#include "meta-test/meta-context-test.h"
 #include "tests/meta-wayland-test-driver.h"
 #include "wayland/meta-wayland.h"
 #include "wayland/meta-wayland-surface.h"
@@ -248,7 +247,7 @@ toplevel_apply_limits (void)
   g_test_assert_expected_messages ();
 }
 
-void
+static void
 pre_run_wayland_tests (void)
 {
   MetaWaylandCompositor *compositor;
@@ -259,7 +258,7 @@ pre_run_wayland_tests (void)
   test_driver = meta_wayland_test_driver_new (compositor);
 }
 
-void
+static void
 init_wayland_tests (void)
 {
   g_test_add_func ("/wayland/subsurface/remap-toplevel",
@@ -273,3 +272,20 @@ init_wayland_tests (void)
   g_test_add_func ("/wayland/toplevel/apply-limits",
                    toplevel_apply_limits);
 }
+
+int
+main (int argc, char *argv[])
+{
+  g_autoptr (MetaContext) context = NULL;
+
+  context = meta_create_test_context (META_CONTEXT_TEST_TYPE_NESTED,
+                                      META_CONTEXT_TEST_FLAG_TEST_CLIENT);
+  g_assert (meta_context_configure (context, &argc, &argv, NULL));
+
+  init_wayland_tests ();
+
+  g_signal_connect (context, "before-tests",
+                    G_CALLBACK (pre_run_wayland_tests), NULL);
+
+  return meta_context_test_run_tests (META_CONTEXT_TEST (context));
+}
diff --git a/src/tests/wayland-unit-tests.h b/src/tests/wayland-unit-tests.h
deleted file mode 100644
index b7d8d4204d..0000000000
--- a/src/tests/wayland-unit-tests.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * Copyright (C) 2019 Red Hat, Inc.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef WAYLAND_UNIT_TESTS_H
-#define WAYLAND_UNIT_TESTS_H
-
-void init_wayland_tests (void);
-
-void pre_run_wayland_tests (void);
-
-#endif /* WAYLAND_UNIT_TESTS_H */
-- 
2.33.1


From 2daac1e2b57e395288bdbeac215955a8a94d04e0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 8 Nov 2021 11:13:06 +0100
Subject: [PATCH 14/30] wayland/activation: Don't grab if no serial or surface
 was provided

A client can create a token without any seat, serial, or surface. In
this case, we'd still try to grab, which would run into some unforseen
code paths, potentially resulting in the following crash:

  0) meta_wayland_tablet_seat_device_added (tablet_seat=0x55dff4271c90,
                                            device=0x7f87b80655b0) at
       ../src/wayland/meta-wayland-tablet-seat.c:200
  1) meta_wayland_tablet_seat_new (seat=0x0, manager=0x55dff3ec7b40) at
       ../src/wayland/meta-wayland-tablet-seat.c:283
  2) meta_wayland_tablet_manager_ensure_seat (manager=manager@entry=0x55dff3ec7b40,
                                              seat=seat@entry=0x0) at
       ../src/wayland/meta-wayland-tablet-manager.c:239
  3) meta_wayland_tablet_manager_ensure_seat (seat=0x0, manager=0x55dff3ec7b40) at
       ../src/wayland/meta-wayland-touch.c:595
  4) meta_wayland_seat_get_grab_info (seat=0x0, surface=0x55dff43ff5b0,
                                      serial=0, require_pressed=0, x=0x0, y=0x0) at
       ../src/wayland/meta-wayland-seat.c:479
  5) activation_activate (...) at
       ../src/wayland/meta-wayland-activation.c:261

Fix this by not trying to grab if not enough parameters was passed when
creating the token. Also add a test case that reproduces the above
crash.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2081>
(cherry picked from commit 7f720a40b45d7e8a2d75ccb05dcf8b31ab13fcea)
---
 src/tests/wayland-test-clients/meson.build    |   1 +
 .../wayland-test-clients/xdg-activation.c     | 340 ++++++++++++++++++
 src/tests/wayland-unit-tests.c                |  13 +
 src/wayland/meta-wayland-activation.c         |   4 +-
 4 files changed, 357 insertions(+), 1 deletion(-)
 create mode 100644 src/tests/wayland-test-clients/xdg-activation.c

diff --git a/src/tests/wayland-test-clients/meson.build b/src/tests/wayland-test-clients/meson.build
index bbe274dcaf..51fe520610 100644
--- a/src/tests/wayland-test-clients/meson.build
+++ b/src/tests/wayland-test-clients/meson.build
@@ -51,6 +51,7 @@ wayland_test_clients = [
   'invalid-subsurfaces',
   'invalid-xdg-shell-actions',
   'xdg-apply-limits',
+  'xdg-activation',
 ]
 
 foreach test : wayland_test_clients
diff --git a/src/tests/wayland-test-clients/xdg-activation.c b/src/tests/wayland-test-clients/xdg-activation.c
new file mode 100644
index 0000000000..e1c1024de5
--- /dev/null
+++ b/src/tests/wayland-test-clients/xdg-activation.c
@@ -0,0 +1,340 @@
+/*
+ * Copyright (C) 2021 Red Hat, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "config.h"
+
+#include <glib.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include <wayland-client.h>
+
+#include "wayland-test-client-utils.h"
+
+#include "test-driver-client-protocol.h"
+#include "xdg-shell-client-protocol.h"
+#include "xdg-activation-v1-client-protocol.h"
+
+static struct wl_display *display;
+static struct wl_registry *registry;
+static struct wl_compositor *compositor;
+static struct xdg_wm_base *xdg_wm_base;
+static struct wl_seat *seat;
+static struct wl_shm *shm;
+static struct xdg_activation_v1 *activation;
+
+static struct wl_surface *surface;
+static struct xdg_surface *xdg_surface;
+static struct xdg_toplevel *xdg_toplevel;
+
+static gboolean running;
+
+static void
+init_surface (const char *token)
+{
+  xdg_toplevel_set_title (xdg_toplevel, "startup notification client");
+  xdg_activation_v1_activate (activation, token, surface);
+  wl_surface_commit (surface);
+}
+
+static void
+handle_buffer_release (void             *data,
+                       struct wl_buffer *buffer)
+{
+  wl_buffer_destroy (buffer);
+}
+
+static const struct wl_buffer_listener buffer_listener = {
+  handle_buffer_release
+};
+
+static gboolean
+create_shm_buffer (int                width,
+                   int                height,
+                   struct wl_buffer **out_buffer,
+                   void             **out_data,
+                   int               *out_size)
+{
+  struct wl_shm_pool *pool;
+  static struct wl_buffer *buffer;
+  int fd, size, stride;
+  int bytes_per_pixel;
+  void *data;
+
+  bytes_per_pixel = 4;
+  stride = width * bytes_per_pixel;
+  size = stride * height;
+
+  fd = create_anonymous_file (size);
+  if (fd < 0)
+    {
+      fprintf (stderr, "Creating a buffer file for %d B failed: %m\n",
+               size);
+      return FALSE;
+    }
+
+  data = mmap (NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+  if (data == MAP_FAILED)
+    {
+      fprintf (stderr, "mmap failed: %m\n");
+      close (fd);
+      return FALSE;
+    }
+
+  pool = wl_shm_create_pool (shm, fd, size);
+  buffer = wl_shm_pool_create_buffer (pool, 0,
+                                      width, height,
+                                      stride,
+                                      WL_SHM_FORMAT_ARGB8888);
+  wl_buffer_add_listener (buffer, &buffer_listener, buffer);
+  wl_shm_pool_destroy (pool);
+  close (fd);
+
+  *out_buffer = buffer;
+  *out_data = data;
+  *out_size = size;
+
+  return TRUE;
+}
+
+static void
+fill (void    *buffer_data,
+      int      width,
+      int      height,
+      uint32_t color)
+{
+  uint32_t *pixels = buffer_data;
+  int x, y;
+
+  for (y = 0; y < height; y++)
+    {
+      for (x = 0; x < width; x++)
+        pixels[y * width + x] = color;
+    }
+}
+
+static void
+draw (struct wl_surface *surface,
+      int                width,
+      int                height,
+      uint32_t           color)
+{
+  struct wl_buffer *buffer;
+  void *buffer_data;
+  int size;
+
+  if (!create_shm_buffer (width, height,
+                          &buffer, &buffer_data, &size))
+    g_error ("Failed to create shm buffer");
+
+  fill (buffer_data, width, height, color);
+
+  wl_surface_attach (surface, buffer, 0, 0);
+}
+
+static void
+draw_main (void)
+{
+  draw (surface, 700, 500, 0xff00ff00);
+}
+
+static void
+handle_xdg_toplevel_configure (void                *data,
+                               struct xdg_toplevel *xdg_toplevel,
+                               int32_t              width,
+                               int32_t              height,
+                               struct wl_array     *state)
+{
+}
+
+static void
+handle_xdg_toplevel_close (void                *data,
+                           struct xdg_toplevel *xdg_toplevel)
+{
+  g_assert_not_reached ();
+}
+
+static const struct xdg_toplevel_listener xdg_toplevel_listener = {
+  handle_xdg_toplevel_configure,
+  handle_xdg_toplevel_close,
+};
+
+static void
+handle_xdg_surface_configure (void               *data,
+                              struct xdg_surface *xdg_surface,
+                              uint32_t            serial)
+{
+  draw_main ();
+  wl_surface_commit (surface);
+
+  g_assert_cmpint (wl_display_roundtrip (display), !=, -1);
+  running = FALSE;
+}
+
+static const struct xdg_surface_listener xdg_surface_listener = {
+  handle_xdg_surface_configure,
+};
+
+static void
+handle_xdg_wm_base_ping (void               *data,
+                         struct xdg_wm_base *xdg_wm_base,
+                         uint32_t            serial)
+{
+  xdg_wm_base_pong (xdg_wm_base, serial);
+}
+
+static const struct xdg_wm_base_listener xdg_wm_base_listener = {
+  handle_xdg_wm_base_ping,
+};
+
+static void
+handle_registry_global (void               *data,
+                        struct wl_registry *registry,
+                        uint32_t            id,
+                        const char         *interface,
+                        uint32_t            version)
+{
+  if (strcmp (interface, "wl_compositor") == 0)
+    {
+      compositor = wl_registry_bind (registry, id, &wl_compositor_interface, 1);
+    }
+  else if (strcmp (interface, "xdg_wm_base") == 0)
+    {
+      xdg_wm_base = wl_registry_bind (registry, id,
+                                      &xdg_wm_base_interface, 1);
+      xdg_wm_base_add_listener (xdg_wm_base, &xdg_wm_base_listener, NULL);
+    }
+  else if (strcmp (interface, "wl_seat") == 0)
+    {
+      seat = wl_registry_bind (registry,
+                               id, &wl_seat_interface, 1);
+    }
+  else if (strcmp (interface, "wl_shm") == 0)
+    {
+      shm = wl_registry_bind (registry,
+                              id, &wl_shm_interface, 1);
+    }
+  else if (strcmp (interface, "xdg_activation_v1") == 0)
+    {
+      activation = wl_registry_bind (registry,
+                                     id, &xdg_activation_v1_interface, 1);
+    }
+}
+
+static void
+handle_registry_global_remove (void               *data,
+                               struct wl_registry *registry,
+                               uint32_t            name)
+{
+}
+
+static const struct wl_registry_listener registry_listener = {
+  handle_registry_global,
+  handle_registry_global_remove
+};
+
+static void
+token_done (gpointer                        user_data,
+            struct xdg_activation_token_v1 *provider,
+            const char                     *token)
+{
+  char **token_ptr = user_data;
+
+  *token_ptr = g_strdup (token);
+}
+
+static const struct xdg_activation_token_v1_listener token_listener = {
+  token_done,
+};
+
+static char *
+get_token (void)
+{
+  struct xdg_activation_token_v1 *token;
+  char *token_string = NULL;
+
+  token = xdg_activation_v1_get_activation_token (activation);
+
+  xdg_activation_token_v1_add_listener (token,
+                                        &token_listener,
+                                        &token_string);
+  xdg_activation_token_v1_commit (token);
+
+  while (!token_string)
+    {
+      if (wl_display_roundtrip (display) == -1)
+        break;
+    }
+  xdg_activation_token_v1_destroy (token);
+
+  return token_string;
+}
+
+static void
+test_startup_notifications (void)
+{
+  g_autofree char *token = NULL;
+
+  display = wl_display_connect (NULL);
+  registry = wl_display_get_registry (display);
+  wl_registry_add_listener (registry, &registry_listener, NULL);
+  wl_display_roundtrip (display);
+
+  g_assert_nonnull (shm);
+  g_assert_nonnull (seat);
+  g_assert_nonnull (xdg_wm_base);
+  g_assert_nonnull (activation);
+
+  wl_display_roundtrip (display);
+
+  token = get_token ();
+
+  surface = wl_compositor_create_surface (compositor);
+  xdg_surface = xdg_wm_base_get_xdg_surface (xdg_wm_base, surface);
+  xdg_surface_add_listener (xdg_surface, &xdg_surface_listener, NULL);
+  xdg_toplevel = xdg_surface_get_toplevel (xdg_surface);
+  xdg_toplevel_add_listener (xdg_toplevel, &xdg_toplevel_listener, NULL);
+
+  init_surface (token);
+
+  running = TRUE;
+  while (running)
+    {
+      if (wl_display_dispatch (display) == -1)
+        return;
+    }
+
+  wl_display_roundtrip (display);
+
+  g_clear_pointer (&xdg_toplevel, xdg_toplevel_destroy);
+  g_clear_pointer (&xdg_surface, xdg_surface_destroy);
+  g_clear_pointer (&xdg_wm_base, xdg_wm_base_destroy);
+  g_clear_pointer (&activation, xdg_activation_v1_destroy);
+  g_clear_pointer (&compositor, wl_compositor_destroy);
+  g_clear_pointer (&seat, wl_seat_destroy);
+  g_clear_pointer (&shm, wl_shm_destroy);
+  g_clear_pointer (&registry, wl_registry_destroy);
+  g_clear_pointer (&display, wl_display_disconnect);
+}
+
+int
+main (int    argc,
+      char **argv)
+{
+  test_startup_notifications ();
+
+  return EXIT_SUCCESS;
+}
diff --git a/src/tests/wayland-unit-tests.c b/src/tests/wayland-unit-tests.c
index f7a5d15d08..d001db2ad2 100644
--- a/src/tests/wayland-unit-tests.c
+++ b/src/tests/wayland-unit-tests.c
@@ -247,6 +247,17 @@ toplevel_apply_limits (void)
   g_test_assert_expected_messages ();
 }
 
+static void
+toplevel_activation (void)
+{
+  ApplyLimitData data = {};
+
+  data.loop = g_main_loop_new (NULL, FALSE);
+  data.wayland_test_client = wayland_test_client_new ("xdg-activation");
+  wayland_test_client_finish (data.wayland_test_client);
+  g_test_assert_expected_messages ();
+}
+
 static void
 pre_run_wayland_tests (void)
 {
@@ -271,6 +282,8 @@ init_wayland_tests (void)
                    subsurface_invalid_xdg_shell_actions);
   g_test_add_func ("/wayland/toplevel/apply-limits",
                    toplevel_apply_limits);
+  g_test_add_func ("/wayland/toplevel/activation",
+                   toplevel_activation);
 }
 
 int
diff --git a/src/wayland/meta-wayland-activation.c b/src/wayland/meta-wayland-activation.c
index 20fb1f1e98..1983566c1c 100644
--- a/src/wayland/meta-wayland-activation.c
+++ b/src/wayland/meta-wayland-activation.c
@@ -278,7 +278,9 @@ activation_activate (struct wl_client   *client,
   if (!token)
     return;
 
-  if (meta_wayland_seat_get_grab_info (token->seat,
+  if (token->seat &&
+      token->surface &&
+      meta_wayland_seat_get_grab_info (token->seat,
                                        token->surface,
                                        token->serial,
                                        FALSE, NULL, NULL))
-- 
2.33.1


From 994627e02c58d52fb48ab17440a73b6930889843 Mon Sep 17 00:00:00 2001
From: Simon McVittie <smcv@debian.org>
Date: Sun, 10 Oct 2021 12:31:47 +0100
Subject: [PATCH 15/30] tests: Change how we wait for an orientation change

Previously, we were waiting up to 300ms for the signal, then proceeding
anyway. However, 300ms is not necessarily long enough to wait on an
autobuilder that might be heavily loaded, particularly if it's a non-x86
with different performance characteristics.

Conversely, if mutter responds to the D-Bus signal from the mock sensor
before we have connected to the signal, then we cannot expect to receive
the signal - it was already emitted, but we missed it. In this case, we
need to avoid waiting.

One remaining use of wait_for_orientation_changes() that would previously
always have timed out was in
meta_test_orientation_manager_has_accelerometer(), which does not
actually expect to see an orientation-changed signal. Make this wait
for the accelerometer to be detected instead.

Resolves: https://gitlab.gnome.org/GNOME/mutter/-/issues/1967
Bug-Debian: https://bugs.debian.org/995929
Signed-off-by: Simon McVittie <smcv@debian.org>
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2049>
(cherry picked from commit 27ce84962a5399d6f7f99701d2f6a8212196640f)
---
 src/tests/monitor-unit-tests.c             | 107 ++++++++-------
 src/tests/orientation-manager-unit-tests.c | 148 +++++++++++++++++----
 src/tests/orientation-manager-unit-tests.h |   8 +-
 3 files changed, 181 insertions(+), 82 deletions(-)

diff --git a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
index 6b93db0aed..46bbe36259 100644
--- a/src/tests/monitor-unit-tests.c
+++ b/src/tests/monitor-unit-tests.c
@@ -3558,7 +3558,7 @@ meta_sensors_proxy_reset (MetaSensorsProxyMock *proxy)
 
   meta_sensors_proxy_mock_set_orientation (proxy,
                                            META_ORIENTATION_NORMAL);
-  wait_for_orientation_changes (orientation_manager);
+  wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL, NULL);
   g_object_unref (proxy);
 }
 G_DEFINE_AUTOPTR_CLEANUP_FUNC (MetaSensorsProxyAutoResetMock,
@@ -3876,16 +3876,14 @@ meta_test_monitor_orientation_initial_rotated (void)
   g_autoptr (MetaSensorsProxyAutoResetMock) orientation_mock = NULL;
   g_autoptr (ClutterAutoRemoveInputDevice) touch_device = NULL;
   MetaOrientation orientation;
+  unsigned int times_signalled = 0;
 
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
   orientation = META_ORIENTATION_LEFT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
-  wait_for_orientation_changes (orientation_manager);
-  g_assert_cmpuint (
-    meta_orientation_manager_get_orientation (orientation_manager),
-    ==,
-    orientation);
+  wait_for_orientation (orientation_manager, orientation, &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   test_setup = create_monitor_test_setup (&test_case.setup,
                                           MONITOR_TEST_FLAG_NO_STORED);
@@ -3984,15 +3982,13 @@ meta_test_monitor_orientation_initial_rotated_no_touch_mode (void)
     meta_backend_get_orientation_manager (backend);
   g_autoptr (MetaSensorsProxyAutoResetMock) orientation_mock = NULL;
   MetaOrientation orientation;
+  unsigned int times_signalled = 0;
 
   orientation_mock = meta_sensors_proxy_mock_get ();
   orientation = META_ORIENTATION_LEFT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
-  wait_for_orientation_changes (orientation_manager);
-  g_assert_cmpuint (
-    meta_orientation_manager_get_orientation (orientation_manager),
-    ==,
-    orientation);
+  wait_for_orientation (orientation_manager, orientation, &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   test_setup = create_monitor_test_setup (&test_case.setup,
                                           MONITOR_TEST_FLAG_NO_STORED);
@@ -4094,6 +4090,7 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
   g_autoptr (MetaSensorsProxyAutoResetMock) orientation_mock = NULL;
   g_autoptr (ClutterAutoRemoveInputDevice) touch_device = NULL;
   MetaOrientation orientation;
+  unsigned int times_signalled = 0;
 
   if (!meta_is_stage_views_enabled ())
     {
@@ -4105,11 +4102,8 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
   touch_device = meta_test_add_touch_device (backend);
   orientation = META_ORIENTATION_RIGHT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
-  wait_for_orientation_changes (orientation_manager);
-  g_assert_cmpuint (
-    meta_orientation_manager_get_orientation (orientation_manager),
-    ==,
-    orientation);
+  wait_for_orientation (orientation_manager, orientation, &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   test_setup = create_monitor_test_setup (&test_case.setup,
                                           MONITOR_TEST_FLAG_NONE);
@@ -4131,11 +4125,8 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
 
   orientation = META_ORIENTATION_LEFT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
-  wait_for_orientation_changes (orientation_manager);
-  g_assert_cmpuint (
-    meta_orientation_manager_get_orientation (orientation_manager),
-    ==,
-    orientation);
+  wait_for_orientation (orientation_manager, orientation, &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   meta_backend_test_set_is_lid_closed (META_BACKEND_TEST (backend), FALSE);
   meta_monitor_manager_lid_is_closed_changed (monitor_manager);
@@ -4150,11 +4141,8 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
 
   orientation = META_ORIENTATION_RIGHT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
-  wait_for_orientation_changes (orientation_manager);
-  g_assert_cmpuint (
-    meta_orientation_manager_get_orientation (orientation_manager),
-    ==,
-    orientation);
+  wait_for_orientation (orientation_manager, orientation, &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   META_TEST_LOG_CALL ("Checking configuration per orientation",
                       check_monitor_configuration_per_orientation (
@@ -4252,6 +4240,7 @@ meta_test_monitor_orientation_initial_stored_rotated_no_touch (void)
     meta_backend_get_orientation_manager (backend);
   g_autoptr (MetaSensorsProxyAutoResetMock) orientation_mock = NULL;
   MetaOrientation orientation;
+  unsigned int times_signalled = 0;
 
   if (!meta_is_stage_views_enabled ())
     {
@@ -4262,11 +4251,8 @@ meta_test_monitor_orientation_initial_stored_rotated_no_touch (void)
   orientation_mock = meta_sensors_proxy_mock_get ();
   orientation = META_ORIENTATION_RIGHT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
-  wait_for_orientation_changes (orientation_manager);
-  g_assert_cmpuint (
-    meta_orientation_manager_get_orientation (orientation_manager),
-    ==,
-    orientation);
+  wait_for_orientation (orientation_manager, orientation, &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   test_setup = create_monitor_test_setup (&test_case.setup,
                                           MONITOR_TEST_FLAG_NONE);
@@ -4383,6 +4369,7 @@ meta_test_monitor_orientation_changes (void)
   g_autoptr (MetaMonitorsConfig) initial_config = NULL;
   g_autoptr (MetaMonitorsConfig) previous_config = NULL;
   MetaOrientation i;
+  unsigned int times_signalled = 0;
 
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
@@ -4406,10 +4393,8 @@ meta_test_monitor_orientation_changes (void)
       MetaMonitorsConfig *previous;
 
       meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (orientation_manager);
-      g_assert_cmpuint (
-        meta_orientation_manager_get_orientation (orientation_manager),
-        ==, i);
+      wait_for_orientation (orientation_manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
 
       META_TEST_LOG_CALL ("Checking configuration per orientation",
                           check_monitor_configuration_per_orientation (
@@ -4435,7 +4420,9 @@ meta_test_monitor_orientation_changes (void)
 
   meta_sensors_proxy_mock_set_orientation (orientation_mock,
                                            META_ORIENTATION_NORMAL);
-  wait_for_orientation_changes (orientation_manager);
+  wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL,
+                        &times_signalled);
+  g_assert_cmpuint (times_signalled, ==, 0);
   META_TEST_LOG_CALL ("Checking configuration per orientation",
                       check_monitor_configuration_per_orientation (
                         &test_case.expect, 0, META_ORIENTATION_NORMAL,
@@ -4453,10 +4440,8 @@ meta_test_monitor_orientation_changes (void)
       MetaMonitorsConfig *previous;
 
       meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (orientation_manager);
-      g_assert_cmpuint (
-        meta_orientation_manager_get_orientation (orientation_manager),
-        ==, i);
+      wait_for_orientation (orientation_manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
 
       META_TEST_LOG_CALL ("Checking configuration per orientation",
                           check_monitor_configuration_per_orientation (
@@ -4607,6 +4592,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   g_autoptr (ClutterAutoRemoveInputDevice) touch_device = NULL;
   g_autoptr (MetaSensorsProxyAutoResetMock) orientation_mock = NULL;
   MetaOrientation i;
+  unsigned int times_signalled = 0;
 
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
@@ -4630,10 +4616,8 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   for (i = META_N_ORIENTATIONS - 1; i > META_ORIENTATION_UNDEFINED; i--)
     {
       meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (orientation_manager);
-      g_assert_cmpuint (
-        meta_orientation_manager_get_orientation (orientation_manager),
-        ==, i);
+      wait_for_orientation (orientation_manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
 
       META_TEST_LOG_CALL ("Checking configuration per orientation",
                           check_monitor_configuration_per_orientation (
@@ -4642,7 +4626,9 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
 
   meta_sensors_proxy_mock_set_orientation (orientation_mock,
                                            META_ORIENTATION_NORMAL);
-  wait_for_orientation_changes (orientation_manager);
+  wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL,
+                        &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
   check_monitor_configuration (&test_case.expect);
 
   /* External monitor connected */
@@ -4663,10 +4649,8 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   for (i = META_N_ORIENTATIONS - 1; i > META_ORIENTATION_UNDEFINED; i--)
     {
       meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (orientation_manager);
-      g_assert_cmpuint (
-        meta_orientation_manager_get_orientation (orientation_manager),
-        ==, i);
+      wait_for_orientation (orientation_manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
 
       META_TEST_LOG_CALL ("Checking configuration per orientation",
                           check_monitor_configuration_per_orientation (
@@ -4675,7 +4659,9 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
 
   meta_sensors_proxy_mock_set_orientation (orientation_mock,
                                            META_ORIENTATION_NORMAL);
-  wait_for_orientation_changes (orientation_manager);
+  wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL,
+                        &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
   check_monitor_configuration (&test_case.expect);
 
   /* Lid closed */
@@ -4695,13 +4681,16 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   for (i = META_N_ORIENTATIONS - 1; i > META_ORIENTATION_UNDEFINED; i--)
     {
       meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (orientation_manager);
+      wait_for_orientation (orientation_manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
       check_monitor_configuration (&test_case.expect);
     }
 
   meta_sensors_proxy_mock_set_orientation (orientation_mock,
                                            META_ORIENTATION_NORMAL);
-  wait_for_orientation_changes (orientation_manager);
+  wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL,
+                        &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 
   /*
    * The second part of this test emulate the following at each device rotation:
@@ -4744,7 +4733,8 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
 
       /* Change orientation */
       meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (orientation_manager);
+      wait_for_orientation (orientation_manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
       check_monitor_configuration (&test_case.expect);
 
       /* Open the lid */
@@ -4760,7 +4750,12 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
       meta_backend_test_set_is_lid_closed (META_BACKEND_TEST (backend), FALSE);
       emulate_hotplug (test_setup);
 
-      wait_for_orientation_changes (orientation_manager);
+      /* We don't actually expect the orientation to change here, so we
+       * just wait for a moment (so that if the orientation *did* change,
+       * mutter has had a chance to process it), and then continue. */
+      wait_for_possible_orientation_change (orientation_manager, &times_signalled);
+      g_assert_cmpuint (times_signalled, ==, 0);
+
       META_TEST_LOG_CALL ("Checking configuration per orientation",
                           check_monitor_configuration_per_orientation (
                             &test_case.expect, 0, i, 1024, 768));
@@ -4797,7 +4792,9 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
 
   meta_sensors_proxy_mock_set_orientation (orientation_mock,
                                            META_ORIENTATION_NORMAL);
-  wait_for_orientation_changes (orientation_manager);
+  wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL,
+                        &times_signalled);
+  g_assert_cmpuint (times_signalled, <=, 1);
 }
 
 static void
diff --git a/src/tests/orientation-manager-unit-tests.c b/src/tests/orientation-manager-unit-tests.c
index a936dccb7a..77d632276f 100644
--- a/src/tests/orientation-manager-unit-tests.c
+++ b/src/tests/orientation-manager-unit-tests.c
@@ -24,42 +24,124 @@
 
 #include "tests/meta-sensors-proxy-mock.h"
 
-static void
-on_orientation_changed (gpointer data)
+const char *
+orientation_to_string (MetaOrientation orientation)
 {
-  gboolean *changed = data;
+  switch (orientation)
+    {
+    case META_ORIENTATION_UNDEFINED:
+      return "(undefined)";
+    case META_ORIENTATION_NORMAL:
+      return "normal";
+    case META_ORIENTATION_BOTTOM_UP:
+      return "bottom-up";
+    case META_ORIENTATION_LEFT_UP:
+      return "left-up";
+    case META_ORIENTATION_RIGHT_UP:
+      return "right-up";
+    default:
+      return "(invalid)";
+    }
+}
 
-  *changed = TRUE;
+typedef struct
+{
+  MetaOrientation expected;
+  MetaOrientation orientation;
+  gulong connection_id;
+  guint timeout_id;
+  unsigned int times_signalled;
+} WaitForOrientation;
+
+static void
+on_orientation_changed (WaitForOrientation     *wfo,
+                        MetaOrientationManager *orientation_manager)
+{
+  wfo->orientation = meta_orientation_manager_get_orientation (orientation_manager);
+  wfo->times_signalled++;
 }
 
 static gboolean
 on_max_wait_timeout (gpointer data)
 {
-  guint *timeout_id = data;
-
-  *timeout_id = 0;
+  WaitForOrientation *wfo = data;
 
+  wfo->timeout_id = 0;
   return G_SOURCE_REMOVE;
 }
 
+/*
+ * Assert that the orientation eventually changes to @orientation.
+ */
 void
-wait_for_orientation_changes (MetaOrientationManager *orientation_manager)
+wait_for_orientation (MetaOrientationManager *orientation_manager,
+                      MetaOrientation         orientation,
+                      unsigned int           *times_signalled_out)
 {
-  gboolean changed = FALSE;
-  gulong connection_id;
-  guint timeout_id;
+  WaitForOrientation wfo = {
+    .expected = orientation,
+  };
+
+  wfo.orientation = meta_orientation_manager_get_orientation (orientation_manager);
 
-  timeout_id = g_timeout_add (300, on_max_wait_timeout, &timeout_id);
-  connection_id = g_signal_connect_swapped (orientation_manager,
-                                            "orientation-changed",
-                                            G_CALLBACK (on_orientation_changed),
-                                            &changed);
+  /* This timeout can be relatively generous because we don't expect to
+   * reach it: if we do, that's a test failure. */
+  wfo.timeout_id = g_timeout_add_seconds (10, on_max_wait_timeout, &wfo);
+  wfo.connection_id = g_signal_connect_swapped (orientation_manager,
+                                                "orientation-changed",
+                                                G_CALLBACK (on_orientation_changed),
+                                                &wfo);
 
-  while (!changed && timeout_id)
+  while (wfo.orientation != orientation && wfo.timeout_id != 0)
     g_main_context_iteration (NULL, TRUE);
 
-  g_clear_handle_id (&timeout_id, g_source_remove);
-  g_signal_handler_disconnect (orientation_manager, connection_id);
+  if (wfo.orientation != orientation)
+    {
+      g_error ("Timed out waiting for orientation to change from %s to %s "
+               "(received %u orientation-changed signal(s) while waiting)",
+               orientation_to_string (wfo.orientation),
+               orientation_to_string (orientation),
+               wfo.times_signalled);
+    }
+
+  g_clear_handle_id (&wfo.timeout_id, g_source_remove);
+  g_signal_handler_disconnect (orientation_manager, wfo.connection_id);
+
+  if (times_signalled_out != NULL)
+    *times_signalled_out = wfo.times_signalled;
+}
+
+/*
+ * Wait for a possible orientation change, but don't assert that one occurs.
+ */
+void
+wait_for_possible_orientation_change (MetaOrientationManager *orientation_manager,
+                                      unsigned int           *times_signalled_out)
+{
+  WaitForOrientation wfo = {
+    .expected = META_ORIENTATION_UNDEFINED,
+  };
+
+  wfo.orientation = meta_orientation_manager_get_orientation (orientation_manager);
+
+  /* This can't be as long as the timeout for wait_for_orientation(),
+   * because in the usual case we expect to reach this timeout: we're
+   * only waiting so that if the orientation (incorrectly?) changed here,
+   * we'd have a chance to detect that. */
+  wfo.timeout_id = g_timeout_add (1000, on_max_wait_timeout, &wfo);
+  wfo.connection_id = g_signal_connect_swapped (orientation_manager,
+                                                "orientation-changed",
+                                                G_CALLBACK (on_orientation_changed),
+                                                &wfo);
+
+  while (wfo.times_signalled == 0 && wfo.timeout_id != 0)
+    g_main_context_iteration (NULL, TRUE);
+
+  g_clear_handle_id (&wfo.timeout_id, g_source_remove);
+  g_signal_handler_disconnect (orientation_manager, wfo.connection_id);
+
+  if (times_signalled_out != NULL)
+    *times_signalled_out = wfo.times_signalled;
 }
 
 static void
@@ -90,25 +172,40 @@ meta_test_orientation_manager_no_device (void)
   g_object_unref (orientation_mock);
 }
 
+static gboolean
+on_wait_for_accel_timeout (gpointer data)
+{
+  guint *timeout_p = data;
+
+  *timeout_p = 0;
+  return G_SOURCE_REMOVE;
+}
+
 static void
 meta_test_orientation_manager_has_accelerometer (void)
 {
   g_autoptr (MetaOrientationManager) manager = NULL;
   g_autoptr (MetaSensorsProxyMock) orientation_mock = NULL;
+  guint timeout_id;
 
   manager = g_object_new (META_TYPE_ORIENTATION_MANAGER, NULL);
   orientation_mock = meta_sensors_proxy_mock_get ();
 
+  timeout_id = g_timeout_add_seconds (10, on_wait_for_accel_timeout, &timeout_id);
   meta_sensors_proxy_mock_set_property (orientation_mock,
                                         "HasAccelerometer",
                                         g_variant_new_boolean (TRUE));
-  wait_for_orientation_changes (manager);
+
+  while (!meta_orientation_manager_has_accelerometer (manager) &&
+         timeout_id != 0)
+    g_main_context_iteration (NULL, TRUE);
 
   g_debug ("Checking whether accelerometer is present");
   g_assert_true (meta_orientation_manager_has_accelerometer (manager));
   g_assert_cmpuint (meta_orientation_manager_get_orientation (manager),
                     ==,
                     META_ORIENTATION_UNDEFINED);
+  g_clear_handle_id (&timeout_id, g_source_remove);
 }
 
 static void
@@ -141,14 +238,13 @@ meta_test_orientation_manager_accelerometer_orientations (void)
 
   for (i = initial + 1; i != initial; i = (i + 1) % META_N_ORIENTATIONS)
     {
-      changed_called = FALSE;
-      meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
-      wait_for_orientation_changes (manager);
+      unsigned int times_signalled = 0;
 
+      changed_called = FALSE;
       g_debug ("Checking orientation %d", i);
-      g_assert_cmpuint (meta_orientation_manager_get_orientation (manager),
-                        ==,
-                        i);
+      meta_sensors_proxy_mock_set_orientation (orientation_mock, i);
+      wait_for_orientation (manager, i, &times_signalled);
+      g_assert_cmpuint (times_signalled, <=, 1);
 
       if (i != META_ORIENTATION_UNDEFINED)
         g_assert_true (changed_called);
diff --git a/src/tests/orientation-manager-unit-tests.h b/src/tests/orientation-manager-unit-tests.h
index 56eff09d1d..b425540358 100644
--- a/src/tests/orientation-manager-unit-tests.h
+++ b/src/tests/orientation-manager-unit-tests.h
@@ -25,6 +25,12 @@
 
 void init_orientation_manager_tests (void);
 
-void wait_for_orientation_changes (MetaOrientationManager *orientation_manager);
+void wait_for_orientation (MetaOrientationManager *orientation_manager,
+                           MetaOrientation         orientation,
+                           unsigned int           *times_signalled_out);
+void wait_for_possible_orientation_change (MetaOrientationManager *orientation_manager,
+                                           unsigned int           *times_signalled_out);
+
+const char * orientation_to_string (MetaOrientation orientation);
 
 #endif /* ORIENTATION_MANAGER_UNIT_TESTS_H */
-- 
2.33.1


From f42ffa3279e36ee23aef7f12f478ff8abcc6a51a Mon Sep 17 00:00:00 2001
From: Simon McVittie <smcv@debian.org>
Date: Mon, 11 Oct 2021 09:39:37 +0100
Subject: [PATCH 16/30] tests: Make it easier to keep track of where we are

The monitor orientation tests do a lot of things in sequence. Replace
some of the comments with g_test_message() so that the log from a failed
test gives us a better idea of how far we got.

Signed-off-by: Simon McVittie <smcv@debian.org>
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2049>
(cherry picked from commit 838d5656c347d040892347babea26c71400caed6)
---
 src/tests/monitor-unit-tests.c | 45 ++++++++++++++++++++--------------
 1 file changed, 26 insertions(+), 19 deletions(-)

diff --git a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
index 46bbe36259..11b1adbb12 100644
--- a/src/tests/monitor-unit-tests.c
+++ b/src/tests/monitor-unit-tests.c
@@ -2853,8 +2853,7 @@ meta_test_monitor_lid_closed_with_hotplugged_external (void)
                       check_monitor_configuration (&test_case.expect));
   check_monitor_test_clients_state ();
 
-  /* External monitor connected */
-
+  g_test_message ("External monitor connected");
   test_case.setup.n_outputs = 2;
   test_case.expect.n_outputs = 2;
   test_case.expect.n_monitors = 2;
@@ -2870,8 +2869,7 @@ meta_test_monitor_lid_closed_with_hotplugged_external (void)
                       check_monitor_configuration (&test_case.expect));
   check_monitor_test_clients_state ();
 
-  /* Lid closed */
-
+  g_test_message ("Lid closed");
   test_case.expect.monitors[0].current_mode = -1;
   test_case.expect.logical_monitors[0].monitors[0] = 1,
   test_case.expect.n_logical_monitors = 1;
@@ -2895,8 +2893,7 @@ meta_test_monitor_lid_closed_with_hotplugged_external (void)
    *  4) Open lid
    */
 
-  /* Lid opened */
-
+  g_test_message ("Lid opened");
   test_case.expect.monitors[0].current_mode = 0;
   test_case.expect.logical_monitors[0].monitors[0] = 0,
   test_case.expect.logical_monitors[1].monitors[0] = 1,
@@ -2913,8 +2910,7 @@ meta_test_monitor_lid_closed_with_hotplugged_external (void)
                       check_monitor_configuration (&test_case.expect));
   check_monitor_test_clients_state ();
 
-  /* External monitor disconnected */
-
+  g_test_message ("External monitor disconnected");
   test_case.setup.n_outputs = 1;
   test_case.expect.n_outputs = 1;
   test_case.expect.n_monitors = 1;
@@ -2929,8 +2925,7 @@ meta_test_monitor_lid_closed_with_hotplugged_external (void)
                       check_monitor_configuration (&test_case.expect));
   check_monitor_test_clients_state ();
 
-  /* Lid closed */
-
+  g_test_message ("Lid closed");
   test_case.expect.logical_monitors[0].monitors[0] = 0,
   test_case.expect.n_logical_monitors = 1;
   test_case.expect.screen_width = 1024;
@@ -2943,8 +2938,7 @@ meta_test_monitor_lid_closed_with_hotplugged_external (void)
                       check_monitor_configuration (&test_case.expect));
   check_monitor_test_clients_state ();
 
-  /* Lid opened */
-
+  g_test_message ("Lid opened");
   test_setup = create_monitor_test_setup (&test_case.setup,
                                           MONITOR_TEST_FLAG_NO_STORED);
   meta_backend_test_set_is_lid_closed (META_BACKEND_TEST (backend), FALSE);
@@ -3556,6 +3550,7 @@ meta_sensors_proxy_reset (MetaSensorsProxyMock *proxy)
   MetaOrientationManager *orientation_manager =
     meta_backend_get_orientation_manager (backend);
 
+  g_test_message ("Resetting proxy");
   meta_sensors_proxy_mock_set_orientation (proxy,
                                            META_ORIENTATION_NORMAL);
   wait_for_orientation (orientation_manager, META_ORIENTATION_NORMAL, NULL);
@@ -3878,6 +3873,7 @@ meta_test_monitor_orientation_initial_rotated (void)
   MetaOrientation orientation;
   unsigned int times_signalled = 0;
 
+  g_test_message ("%s", G_STRFUNC);
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
   orientation = META_ORIENTATION_LEFT_UP;
@@ -3984,6 +3980,7 @@ meta_test_monitor_orientation_initial_rotated_no_touch_mode (void)
   MetaOrientation orientation;
   unsigned int times_signalled = 0;
 
+  g_test_message ("%s", G_STRFUNC);
   orientation_mock = meta_sensors_proxy_mock_get ();
   orientation = META_ORIENTATION_LEFT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
@@ -4098,6 +4095,7 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
       return;
     }
 
+  g_test_message ("%s", G_STRFUNC);
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
   orientation = META_ORIENTATION_RIGHT_UP;
@@ -4115,6 +4113,7 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
                       check_monitor_configuration_per_orientation (
                         &test_case.expect, 0, orientation, 960, 540));
 
+  g_test_message ("Closing lid");
   meta_backend_test_set_is_lid_closed (META_BACKEND_TEST (backend), TRUE);
   meta_monitor_manager_lid_is_closed_changed (monitor_manager);
 
@@ -4123,6 +4122,7 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
                       check_monitor_configuration_per_orientation (
                         &test_case.expect, 0, orientation, 960, 540));
 
+  g_test_message ("Rotating to left-up");
   orientation = META_ORIENTATION_LEFT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
   wait_for_orientation (orientation_manager, orientation, &times_signalled);
@@ -4137,8 +4137,10 @@ meta_test_monitor_orientation_initial_stored_rotated (void)
                         &test_case.expect, 0, orientation, 960, 540));
 
   /* When no touch device is available, the orientation change is ignored */
+  g_test_message ("Removing touch device");
   meta_backend_test_remove_device (META_BACKEND_TEST (backend), touch_device);
 
+  g_test_message ("Rotating to right-up");
   orientation = META_ORIENTATION_RIGHT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
   wait_for_orientation (orientation_manager, orientation, &times_signalled);
@@ -4248,6 +4250,7 @@ meta_test_monitor_orientation_initial_stored_rotated_no_touch (void)
       return;
     }
 
+  g_test_message ("%s", G_STRFUNC);
   orientation_mock = meta_sensors_proxy_mock_get ();
   orientation = META_ORIENTATION_RIGHT_UP;
   meta_sensors_proxy_mock_set_orientation (orientation_mock, orientation);
@@ -4265,6 +4268,7 @@ meta_test_monitor_orientation_initial_stored_rotated_no_touch (void)
                         &test_case.expect, 0, META_ORIENTATION_NORMAL,
                         960, 540));
 
+  g_test_message ("Closing lid");
   meta_backend_test_set_is_lid_closed (META_BACKEND_TEST (backend), TRUE);
   meta_monitor_manager_lid_is_closed_changed (monitor_manager);
 
@@ -4371,6 +4375,7 @@ meta_test_monitor_orientation_changes (void)
   MetaOrientation i;
   unsigned int times_signalled = 0;
 
+  g_test_message ("%s", G_STRFUNC);
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
   test_setup = create_monitor_test_setup (&test_case.setup,
@@ -4432,6 +4437,7 @@ meta_test_monitor_orientation_changes (void)
             initial_config);
 
   /* When no touch device is available, the orientation changes are ignored */
+  g_test_message ("Removing touch device");
   meta_backend_test_remove_device (META_BACKEND_TEST (backend), touch_device);
 
   for (i = META_N_ORIENTATIONS - 1; i > META_ORIENTATION_UNDEFINED; i--)
@@ -4594,6 +4600,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   MetaOrientation i;
   unsigned int times_signalled = 0;
 
+  g_test_message ("%s", G_STRFUNC);
   orientation_mock = meta_sensors_proxy_mock_get ();
   touch_device = meta_test_add_touch_device (backend);
 
@@ -4631,7 +4638,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   g_assert_cmpuint (times_signalled, <=, 1);
   check_monitor_configuration (&test_case.expect);
 
-  /* External monitor connected */
+  g_test_message ("External monitor connected");
   test_case.setup.n_outputs = 2;
   test_case.expect.n_outputs = 2;
   test_case.expect.n_monitors = 2;
@@ -4664,7 +4671,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
   g_assert_cmpuint (times_signalled, <=, 1);
   check_monitor_configuration (&test_case.expect);
 
-  /* Lid closed */
+  g_test_message ("Lid closed");
   test_case.expect.monitors[0].current_mode = -1;
   test_case.expect.logical_monitors[0].monitors[0] = 1,
   test_case.expect.n_logical_monitors = 1;
@@ -4701,7 +4708,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
    *  2) Disconnect external monitor
    */
 
-  /* Lid opened */
+  g_test_message ("Lid opened");
   test_case.expect.monitors[0].current_mode = 0;
   test_case.expect.logical_monitors[0].monitors[0] = 0,
   test_case.expect.logical_monitors[1].monitors[0] = 1,
@@ -4718,7 +4725,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
 
   for (i = META_N_ORIENTATIONS - 1; i > META_ORIENTATION_UNDEFINED; i--)
     {
-      /* Closing lid */
+      g_test_message ("Closing lid");
       test_case.expect.monitors[0].current_mode = -1;
       test_case.expect.logical_monitors[0].monitors[0] = 1,
       test_case.expect.n_logical_monitors = 1;
@@ -4737,7 +4744,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
       g_assert_cmpuint (times_signalled, <=, 1);
       check_monitor_configuration (&test_case.expect);
 
-      /* Open the lid */
+      g_test_message ("Opening lid");
       test_case.expect.monitors[0].current_mode = 0;
       test_case.expect.logical_monitors[0].monitors[0] = 0,
       test_case.expect.logical_monitors[1].monitors[0] = 1,
@@ -4760,7 +4767,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
                           check_monitor_configuration_per_orientation (
                             &test_case.expect, 0, i, 1024, 768));
 
-      /* External monitor disconnected */
+      g_test_message ("External monitor disconnected");
       test_case.setup.n_outputs = 1;
       test_case.expect.n_outputs = 1;
       test_case.expect.n_monitors = 1;
@@ -4774,7 +4781,7 @@ meta_test_monitor_orientation_changes_with_hotplugging (void)
                           check_monitor_configuration_per_orientation (
                             &test_case.expect, 0, i, 1024, 768));
 
-      /* External monitor connected */
+      g_test_message ("External monitor connected");
       test_case.setup.n_outputs = 2;
       test_case.expect.n_outputs = 2;
       test_case.expect.n_monitors = 2;
-- 
2.33.1


From e787065e204a86e7353775953ae7f095fe3f39c3 Mon Sep 17 00:00:00 2001
From: Simon McVittie <smcv@debian.org>
Date: Sun, 10 Oct 2021 13:43:52 +0100
Subject: [PATCH 17/30] tests: Add additional debug in wait_for_orientation()

Signed-off-by: Simon McVittie <smcv@debian.org>
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2049>
(cherry picked from commit 7c6fe21daf2d11b8c3caeee3d0a83150302ca4a2)
---
 src/tests/orientation-manager-unit-tests.c | 25 ++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/src/tests/orientation-manager-unit-tests.c b/src/tests/orientation-manager-unit-tests.c
index 77d632276f..85d9a6e54b 100644
--- a/src/tests/orientation-manager-unit-tests.c
+++ b/src/tests/orientation-manager-unit-tests.c
@@ -59,6 +59,9 @@ on_orientation_changed (WaitForOrientation     *wfo,
 {
   wfo->orientation = meta_orientation_manager_get_orientation (orientation_manager);
   wfo->times_signalled++;
+
+  g_test_message ("wait_for_orientation_changes: Orientation changed to %d: %s",
+                  wfo->orientation, orientation_to_string (wfo->orientation));
 }
 
 static gboolean
@@ -83,6 +86,11 @@ wait_for_orientation (MetaOrientationManager *orientation_manager,
   };
 
   wfo.orientation = meta_orientation_manager_get_orientation (orientation_manager);
+  g_test_message ("%s: Waiting for orientation to change from "
+                  "%d: %s to %d: %s...",
+                  G_STRFUNC, wfo.orientation,
+                  orientation_to_string (wfo.orientation),
+                  orientation, orientation_to_string (orientation));
 
   /* This timeout can be relatively generous because we don't expect to
    * reach it: if we do, that's a test failure. */
@@ -104,6 +112,9 @@ wait_for_orientation (MetaOrientationManager *orientation_manager,
                wfo.times_signalled);
     }
 
+  g_test_message ("%s: Orientation is now %d: %s",
+                  G_STRFUNC, orientation, orientation_to_string (orientation));
+
   g_clear_handle_id (&wfo.timeout_id, g_source_remove);
   g_signal_handler_disconnect (orientation_manager, wfo.connection_id);
 
@@ -123,6 +134,9 @@ wait_for_possible_orientation_change (MetaOrientationManager *orientation_manage
   };
 
   wfo.orientation = meta_orientation_manager_get_orientation (orientation_manager);
+  g_test_message ("%s: Waiting for orientation to maybe change from %d: %s...",
+                  G_STRFUNC, wfo.orientation,
+                  orientation_to_string (wfo.orientation));
 
   /* This can't be as long as the timeout for wait_for_orientation(),
    * because in the usual case we expect to reach this timeout: we're
@@ -137,6 +151,17 @@ wait_for_possible_orientation_change (MetaOrientationManager *orientation_manage
   while (wfo.times_signalled == 0 && wfo.timeout_id != 0)
     g_main_context_iteration (NULL, TRUE);
 
+  if (wfo.timeout_id == 0)
+    {
+      g_test_message ("%s: Orientation didn't change", G_STRFUNC);
+    }
+  else
+    {
+      g_test_message ("%s: Orientation is now %d: %s",
+                      G_STRFUNC, wfo.orientation,
+                      orientation_to_string (wfo.orientation));
+    }
+
   g_clear_handle_id (&wfo.timeout_id, g_source_remove);
   g_signal_handler_disconnect (orientation_manager, wfo.connection_id);
 
-- 
2.33.1


From fe0ea79b83256d80f1dee1e4a49c94a5d6fd18a6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 11 Oct 2021 10:52:43 +0200
Subject: [PATCH 18/30] renderer/native: Log render mode per device

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2051>
(cherry picked from commit e8249a572d669c4c0a8464d6bce556b2cbaca4ef)
---
 src/backends/native/meta-renderer-native.c | 30 ++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index eb6771b802..40cc0460fc 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -1943,6 +1943,24 @@ meta_renderer_native_create_renderer_gpu_data (MetaRendererNative  *renderer_nat
   return NULL;
 }
 
+static const char *
+renderer_data_mode_to_string (MetaRendererNativeMode mode)
+{
+  switch (mode)
+    {
+    case META_RENDERER_NATIVE_MODE_GBM:
+      return "gbm";
+    case META_RENDERER_NATIVE_MODE_SURFACELESS:
+      return "surfaceless";
+#ifdef HAVE_EGL_DEVICE
+    case META_RENDERER_NATIVE_MODE_EGL_DEVICE:
+      return "egldevice";
+#endif
+    }
+
+  g_assert_not_reached ();
+}
+
 static gboolean
 create_renderer_gpu_data (MetaRendererNative  *renderer_native,
                           MetaGpuKms          *gpu_kms,
@@ -1957,6 +1975,18 @@ create_renderer_gpu_data (MetaRendererNative  *renderer_native,
   if (!renderer_gpu_data)
     return FALSE;
 
+  if (gpu_kms)
+    {
+      g_message ("Created %s renderer for '%s'",
+                 renderer_data_mode_to_string (renderer_gpu_data->mode),
+                 meta_gpu_kms_get_file_path (gpu_kms));
+    }
+  else
+    {
+      g_message ("Created %s renderer without GPU",
+                 renderer_data_mode_to_string (renderer_gpu_data->mode));
+    }
+
   g_hash_table_insert (renderer_native->gpu_datas,
                        gpu_kms,
                        renderer_gpu_data);
-- 
2.33.1


From 79c9c24fd3df8c1d25526ca15288b7266406b26f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 11 Oct 2021 10:39:43 +0200
Subject: [PATCH 19/30] renderer/native: Try the gbm renderer before the
 EGLDevice renderer

This switches the order of what renderer mode is tried first, so that
the gbm renderer mode is preferred on an NVIDIA driver where it is
supported.

We fall back to still try the EGLDevice renderer mode if the created gbm
renderer is not hardware accelerated.

The last fallback is still to use the gbm renderer, even if it is not
hardware accelerated, as this is needed when hardware acceleration isn't
available at all. The original reason for the old order was due to the
fact that a gbm renderer without hardware acceleration would succeed
even on NVIDIA driver that didn't support gbm.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2051>
(cherry picked from commit 8fc1325e8e713dfa05a12c47e6e981e50d3cda61)
---
 src/backends/native/meta-renderer-native.c | 44 +++++++++++-----------
 1 file changed, 23 insertions(+), 21 deletions(-)

diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index 40cc0460fc..452503777d 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -1876,11 +1876,12 @@ meta_renderer_native_create_renderer_gpu_data (MetaRendererNative  *renderer_nat
   MetaBackend *backend = meta_renderer_get_backend (renderer);
   MetaDevicePool *device_pool =
     meta_backend_native_get_device_pool (META_BACKEND_NATIVE (backend));
-  MetaRendererNativeGpuData *renderer_gpu_data;
+  MetaRendererNativeGpuData *gbm_renderer_gpu_data;
   MetaDeviceFileFlags device_file_flags = META_DEVICE_FILE_FLAG_NONE;
   g_autoptr (MetaDeviceFile) device_file = NULL;
   GError *gbm_error = NULL;
 #ifdef HAVE_EGL_DEVICE
+  MetaRendererNativeGpuData *egl_stream_renderer_gpu_data;
   GError *egl_device_error = NULL;
 #endif
 
@@ -1898,29 +1899,30 @@ meta_renderer_native_create_renderer_gpu_data (MetaRendererNative  *renderer_nat
   if (!device_file)
     return NULL;
 
-#ifdef HAVE_EGL_DEVICE
-  /* Try to initialize the EGLDevice backend first. Whenever we use a
-   * non-NVIDIA GPU, the EGLDevice enumeration function won't find a match, and
-   * we'll fall back to GBM (which will always succeed as it has a software
-   * rendering fallback)
-   */
-  renderer_gpu_data = create_renderer_gpu_data_egl_device (renderer_native,
-                                                           device_file,
-                                                           &egl_device_error);
-  if (renderer_gpu_data)
-    return renderer_gpu_data;
-#endif
-
-  renderer_gpu_data = create_renderer_gpu_data_gbm (renderer_native,
-                                                    device_file,
-                                                    &gbm_error);
-  if (renderer_gpu_data)
+  gbm_renderer_gpu_data = create_renderer_gpu_data_gbm (renderer_native,
+                                                        device_file,
+                                                        &gbm_error);
+  if (gbm_renderer_gpu_data)
     {
+      if (gbm_renderer_gpu_data->secondary.is_hardware_rendering)
+        return gbm_renderer_gpu_data;
+    }
+
 #ifdef HAVE_EGL_DEVICE
-      g_error_free (egl_device_error);
-#endif
-      return renderer_gpu_data;
+  egl_stream_renderer_gpu_data =
+    create_renderer_gpu_data_egl_device (renderer_native,
+                                         device_file,
+                                         &egl_device_error);
+  if (egl_stream_renderer_gpu_data)
+    {
+      g_clear_pointer (&gbm_renderer_gpu_data,
+                       meta_renderer_native_gpu_data_free);
+      return egl_stream_renderer_gpu_data;
     }
+#endif
+
+  if (gbm_renderer_gpu_data)
+    return gbm_renderer_gpu_data;
 
   g_set_error (error, G_IO_ERROR,
                G_IO_ERROR_FAILED,
-- 
2.33.1


From e3931f7b8cbd44072137c5dc9de9041486daeade Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 14 Oct 2021 18:36:43 +0200
Subject: [PATCH 20/30] wayland: Only init EGLStream controller if we didn't
 end up with gbm

When we use gbm together with the NVIDIA driver, we want the EGL/Vulkan
clients to do the same, instead of using the EGLStream paths. To achieve
that, make sure to only initialize the EGLStream controller when we
didn't end up using gbm as the renderer backend.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2052>
(cherry picked from commit ac907119ae0f415c099976635c3b1dff4d2d7201)
---
 src/backends/native/meta-renderer-native.c | 11 ++++++++++
 src/backends/native/meta-renderer-native.h |  2 ++
 src/wayland/meta-wayland.c                 | 25 ++++++++++++++++++++--
 3 files changed, 36 insertions(+), 2 deletions(-)

diff --git a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
index 452503777d..75751fb672 100644
--- a/src/backends/native/meta-renderer-native.c
+++ b/src/backends/native/meta-renderer-native.c
@@ -220,6 +220,17 @@ meta_renderer_native_has_pending_mode_set (MetaRendererNative *renderer_native)
   return renderer_native->pending_mode_set;
 }
 
+MetaRendererNativeMode
+meta_renderer_native_get_mode (MetaRendererNative *renderer_native)
+{
+  MetaGpuKms *primary_gpu = renderer_native->primary_gpu_kms;
+  MetaRendererNativeGpuData *primary_gpu_data;
+
+  primary_gpu_data = meta_renderer_native_get_gpu_data (renderer_native,
+                                                        primary_gpu);
+  return primary_gpu_data->mode;
+}
+
 static void
 meta_renderer_native_disconnect (CoglRenderer *cogl_renderer)
 {
diff --git a/src/backends/native/meta-renderer-native.h b/src/backends/native/meta-renderer-native.h
index 2c23c651ad..a01ceede26 100644
--- a/src/backends/native/meta-renderer-native.h
+++ b/src/backends/native/meta-renderer-native.h
@@ -68,4 +68,6 @@ void meta_renderer_native_reset_modes (MetaRendererNative *renderer_native);
 
 gboolean meta_renderer_native_use_modifiers (MetaRendererNative *renderer_native);
 
+MetaRendererNativeMode meta_renderer_native_get_mode (MetaRendererNative *renderer_native);
+
 #endif /* META_RENDERER_NATIVE_H */
diff --git a/src/wayland/meta-wayland.c b/src/wayland/meta-wayland.c
index 089b2d5026..ceb2afed35 100644
--- a/src/wayland/meta-wayland.c
+++ b/src/wayland/meta-wayland.c
@@ -51,6 +51,10 @@
 #include "wayland/meta-xwayland-private.h"
 #include "wayland/meta-xwayland.h"
 
+#ifdef HAVE_NATIVE_BACKEND
+#include "backends/native/meta-renderer-native.h"
+#endif
+
 static char *_display_name_override;
 
 G_DEFINE_TYPE (MetaWaylandCompositor, meta_wayland_compositor, G_TYPE_OBJECT)
@@ -573,8 +577,25 @@ meta_wayland_compositor_new (MetaContext *context)
                                   compositor);
 
 #ifdef HAVE_WAYLAND_EGLSTREAM
-  meta_wayland_eglstream_controller_init (compositor);
-#endif
+    {
+      gboolean should_enable_eglstream_controller = TRUE;
+#if defined(HAVE_EGL_DEVICE) && defined(HAVE_NATIVE_BACKEND)
+      MetaRenderer *renderer = meta_backend_get_renderer (backend);
+
+      if (META_IS_RENDERER_NATIVE (renderer))
+        {
+          MetaRendererNative *renderer_native = META_RENDERER_NATIVE (renderer);
+
+          if (meta_renderer_native_get_mode (renderer_native) ==
+              META_RENDERER_NATIVE_MODE_GBM)
+            should_enable_eglstream_controller = FALSE;
+        }
+#endif /* defined(HAVE_EGL_DEVICE) && defined(HAVE_NATIVE_BACKEND) */
+
+      if (should_enable_eglstream_controller)
+        meta_wayland_eglstream_controller_init (compositor);
+    }
+#endif /* HAVE_WAYLAND_EGLSTREAM */
 
   x11_display_policy =
     meta_context_get_x11_display_policy (compositor->context);
-- 
2.33.1


From 184163dc68369ecaa89f8a57e78e2d0ea691ac9c Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Wed, 24 Nov 2021 16:16:40 +0800
Subject: [PATCH 21/30] onscreen/native: Increase buffer ref count in
 copy_shared_framebuffer_cpu

It was dropping to zero after the first frame because it hadn't been
incremented high enough. So the second frame would crash with:
```
  #0 g_type_check_instance_cast
  #1 META_DRM_BUFFER
  #2 copy_shared_framebuffer_cpu
```
That's the CPU-copy path (fallback-fallback) that probably no one is using
but it does work after this fix. Exactly the same issue as was fixed
in `copy_shared_framebuffer_primary_gpu` by 36352f44f9547ea1.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2104>


(cherry picked from commit acadf5b3f7a30aa6744d1936762d65e367db730a)
---
 src/backends/native/meta-onscreen-native.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/backends/native/meta-onscreen-native.c b/src/backends/native/meta-onscreen-native.c
index 00b2d9f89c..ca3752bcb3 100644
--- a/src/backends/native/meta-onscreen-native.c
+++ b/src/backends/native/meta-onscreen-native.c
@@ -872,8 +872,7 @@ copy_shared_framebuffer_cpu (CoglOnscreen                        *onscreen,
 
   cogl_object_unref (dumb_bitmap);
 
-  g_clear_object (&secondary_gpu_state->gbm.next_fb);
-  secondary_gpu_state->gbm.next_fb = buffer;
+  g_set_object (&secondary_gpu_state->gbm.next_fb, buffer);
   secondary_gpu_state->cpu.current_dumb_fb = buffer_dumb;
 }
 
-- 
2.33.1


From 644d662d611c5a06176164e9b0953da31b3bc190 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Fri, 26 Nov 2021 12:47:44 +0100
Subject: [PATCH 22/30] surface-actor-wayland: Do not acquire scanout if actor
 appears obscured

This can happen if a texture was newly assigned to the actor, but the
unobscured region hasn't been updated yet. Without bailing here, the
actor would display correctly via direct scanout, but other parts of
mutter would continue considering it obscured, which would e.g. result
in no frame callbacks getting sent for its surface.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1636
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2112>

(cherry picked from commit 2c70120555df0319bf12505b0a50aadffef80f88)
---
 src/compositor/meta-surface-actor-wayland.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/compositor/meta-surface-actor-wayland.c b/src/compositor/meta-surface-actor-wayland.c
index a182ad8513..8c2a93da1e 100644
--- a/src/compositor/meta-surface-actor-wayland.c
+++ b/src/compositor/meta-surface-actor-wayland.c
@@ -73,6 +73,12 @@ meta_surface_actor_wayland_try_acquire_scanout (MetaSurfaceActorWayland *self,
   MetaWaylandSurface *surface;
   CoglScanout *scanout;
 
+  /* If the actor appears to be obscured, need to go through the normal paint
+   * machinery to ensure the unobscured region is up to date
+   */
+  if (meta_surface_actor_is_obscured (META_SURFACE_ACTOR (self)))
+    return NULL;
+
   surface = meta_surface_actor_wayland_get_surface (self);
   if (!surface)
     return NULL;
-- 
2.33.1


From 81bdbf96ed7a1e197d008a882f819ac6b69e4d77 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 6 Sep 2021 10:40:17 +0200
Subject: [PATCH 23/30] crtc/native: Add API to check whether the CRTC supports
 hardware cursors

On a KMS backed CRTC, hardware cursor are supported when there are
cursor planes to assign them to. Note that when using legacy mode
setting, fake cursor planes are added when adequate.

On virtual CRTCs, used with virtual monitors, the equivalent of hardware
cursor are always supported, as they are sent using embedded PipeWire
stream metadata.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1991>

(cherry picked from commit e82685d04944026389ac0436bfc87550dfe48c82)
---
 src/backends/native/meta-crtc-kms.c     | 11 +++++++++++
 src/backends/native/meta-crtc-native.c  |  8 ++++++++
 src/backends/native/meta-crtc-native.h  |  3 +++
 src/backends/native/meta-crtc-virtual.c |  8 ++++++++
 4 files changed, 30 insertions(+)

diff --git a/src/backends/native/meta-crtc-kms.c b/src/backends/native/meta-crtc-kms.c
index fde6481753..584a780ba8 100644
--- a/src/backends/native/meta-crtc-kms.c
+++ b/src/backends/native/meta-crtc-kms.c
@@ -94,6 +94,16 @@ meta_crtc_kms_is_transform_handled (MetaCrtcNative       *crtc_native,
   return is_transform_handled (crtc_kms, transform);
 }
 
+static gboolean
+meta_crtc_kms_is_hw_cursor_supported (MetaCrtcNative *crtc_native)
+{
+  MetaCrtcKms *crtc_kms = META_CRTC_KMS (crtc_native);
+  MetaKmsCrtc *kms_crtc = meta_crtc_kms_get_kms_crtc (crtc_kms);
+  MetaKmsDevice *kms_device = meta_kms_crtc_get_device (kms_crtc);
+
+  return !!meta_kms_device_get_cursor_plane_for (kms_device, kms_crtc);
+}
+
 void
 meta_crtc_kms_apply_transform (MetaCrtcKms            *crtc_kms,
                                MetaKmsPlaneAssignment *kms_plane_assignment)
@@ -385,4 +395,5 @@ meta_crtc_kms_class_init (MetaCrtcKmsClass *klass)
   object_class->dispose = meta_crtc_kms_dispose;
 
   crtc_native_class->is_transform_handled = meta_crtc_kms_is_transform_handled;
+  crtc_native_class->is_hw_cursor_supported = meta_crtc_kms_is_hw_cursor_supported;
 }
diff --git a/src/backends/native/meta-crtc-native.c b/src/backends/native/meta-crtc-native.c
index 5e5751780f..44e8d50883 100644
--- a/src/backends/native/meta-crtc-native.c
+++ b/src/backends/native/meta-crtc-native.c
@@ -33,6 +33,14 @@ meta_crtc_native_is_transform_handled (MetaCrtcNative       *crtc_native,
   return klass->is_transform_handled (crtc_native, transform);
 }
 
+gboolean
+meta_crtc_native_is_hw_cursor_supported (MetaCrtcNative *crtc_native)
+{
+  MetaCrtcNativeClass *klass = META_CRTC_NATIVE_GET_CLASS (crtc_native);
+
+  return klass->is_hw_cursor_supported (crtc_native);
+}
+
 static void
 meta_crtc_native_init (MetaCrtcNative *crtc_native)
 {
diff --git a/src/backends/native/meta-crtc-native.h b/src/backends/native/meta-crtc-native.h
index 0c16e58959..c373604ee0 100644
--- a/src/backends/native/meta-crtc-native.h
+++ b/src/backends/native/meta-crtc-native.h
@@ -33,9 +33,12 @@ struct _MetaCrtcNativeClass
 
   gboolean (* is_transform_handled) (MetaCrtcNative       *crtc_native,
                                      MetaMonitorTransform  monitor_transform);
+  gboolean (* is_hw_cursor_supported) (MetaCrtcNative *crtc_native);
 };
 
 gboolean meta_crtc_native_is_transform_handled (MetaCrtcNative       *crtc_native,
                                                 MetaMonitorTransform  transform);
 
+gboolean meta_crtc_native_is_hw_cursor_supported (MetaCrtcNative *crtc_native);
+
 #endif /* META_CRTC_NATIVE_H */
diff --git a/src/backends/native/meta-crtc-virtual.c b/src/backends/native/meta-crtc-virtual.c
index eee346a233..60b59a3f29 100644
--- a/src/backends/native/meta-crtc-virtual.c
+++ b/src/backends/native/meta-crtc-virtual.c
@@ -45,6 +45,12 @@ meta_crtc_virtual_is_transform_handled (MetaCrtcNative       *crtc_native,
   return transform == META_MONITOR_TRANSFORM_NORMAL;
 }
 
+static gboolean
+meta_crtc_virtual_is_hw_cursor_supported (MetaCrtcNative *crtc_native)
+{
+  return TRUE;
+}
+
 static void
 meta_crtc_virtual_init (MetaCrtcVirtual *crtc_virtual)
 {
@@ -57,4 +63,6 @@ meta_crtc_virtual_class_init (MetaCrtcVirtualClass *klass)
 
   crtc_native_class->is_transform_handled =
     meta_crtc_virtual_is_transform_handled;
+  crtc_native_class->is_hw_cursor_supported =
+    meta_crtc_virtual_is_hw_cursor_supported;
 }
-- 
2.33.1


From 1c37756839c6f14d8df58e8e834591d94b3bc5c6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Mon, 6 Sep 2021 10:42:32 +0200
Subject: [PATCH 24/30] cursor-renderer/native: Use MetaCrtcNative API to check
 capabilities

The cursor renderer shouldn't assume all the CRTCs of a logical are KMS
CRTC's, as we'll end up checking hardware capabilities for CRTC's of
virtual monitors as well, when they were created to not embed the cursor
image directly in the framebuffer.

Instead, use the newly introduced API for checking CRTC cursor
capabilities. This fixes a crash with the following backtrace:

 0) get_plane_with_type_for at ../src/backends/native/meta-kms-device.c:150
 1) meta_kms_device_get_cursor_plane_for at ../src/backends/native/meta-kms-device.c:173
 2) has_cursor_plane at ../src/backends/native/meta-cursor-renderer-native.c:678
 3) foreach_crtc at ../src/backends/meta-logical-monitor.c:247
 4) meta_monitor_mode_foreach_crtc at ../src/backends/meta-monitor.c:1920
 5) meta_logical_monitor_foreach_crtc at ../src/backends/meta-logical-monitor.c:274
 6) crtcs_has_cursor_planes at ../src/backends/native/meta-cursor-renderer-native.c:718
 7) should_have_hw_cursor at ../src/backends/native/meta-cursor-renderer-native.c:881
 8) meta_cursor_renderer_native_update_cursor at ../src/backends/native/meta-cursor-renderer-native.c:1085
 9) meta_cursor_renderer_update_cursor at ../src/backends/meta-cursor-renderer.c:411

Related: https://bugzilla.redhat.com/show_bug.cgi?id=2000183
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1991>

(cherry picked from commit 00c329a2e54ec638a4f8e172f2b5c602e1c2c2b2)
---
 .../native/meta-cursor-renderer-native.c      | 35 +++++++++----------
 1 file changed, 16 insertions(+), 19 deletions(-)

diff --git a/src/backends/native/meta-cursor-renderer-native.c b/src/backends/native/meta-cursor-renderer-native.c
index effa0851dc..3143d2512b 100644
--- a/src/backends/native/meta-cursor-renderer-native.c
+++ b/src/backends/native/meta-cursor-renderer-native.c
@@ -666,24 +666,21 @@ get_current_relative_transform (MetaCursorSprite *cursor_sprite)
 }
 
 static void
-has_cursor_plane (MetaLogicalMonitor *logical_monitor,
-                  MetaMonitor        *monitor,
-                  MetaOutput         *output,
-                  MetaCrtc           *crtc,
-                  gpointer            user_data)
+crtc_supports_hw_cursor (MetaLogicalMonitor *logical_monitor,
+                         MetaMonitor        *monitor,
+                         MetaOutput         *output,
+                         MetaCrtc           *crtc,
+                         gpointer            user_data)
 {
-  gboolean *has_cursor_planes = user_data;
-  MetaCrtcKms *crtc_kms = META_CRTC_KMS (crtc);
-  MetaKmsCrtc *kms_crtc = meta_crtc_kms_get_kms_crtc (crtc_kms);
-  MetaKmsDevice *kms_device = meta_kms_crtc_get_device (kms_crtc);
+  gboolean *supports_hw_cursor = user_data;
+  MetaCrtcNative *crtc_native = META_CRTC_NATIVE (crtc);
 
-  *has_cursor_planes &= !!meta_kms_device_get_cursor_plane_for (kms_device,
-                                                                kms_crtc);
+  *supports_hw_cursor &= meta_crtc_native_is_hw_cursor_supported (crtc_native);
 }
 
 static gboolean
-crtcs_has_cursor_planes (MetaCursorRenderer *renderer,
-                         MetaCursorSprite   *cursor_sprite)
+crtcs_supports_hw_cursor (MetaCursorRenderer *renderer,
+                          MetaCursorSprite   *cursor_sprite)
 {
   MetaCursorRendererNative *cursor_renderer_native =
     META_CURSOR_RENDERER_NATIVE (renderer);
@@ -705,7 +702,7 @@ crtcs_has_cursor_planes (MetaCursorRenderer *renderer,
       MetaLogicalMonitor *logical_monitor = l->data;
       MetaRectangle logical_monitor_layout;
       graphene_rect_t logical_monitor_rect;
-      gboolean has_cursor_planes;
+      gboolean supports_hw_cursor;
 
       logical_monitor_layout =
         meta_logical_monitor_get_layout (logical_monitor);
@@ -716,11 +713,11 @@ crtcs_has_cursor_planes (MetaCursorRenderer *renderer,
                                        NULL))
         continue;
 
-      has_cursor_planes = TRUE;
+      supports_hw_cursor = TRUE;
       meta_logical_monitor_foreach_crtc (logical_monitor,
-                                         has_cursor_plane,
-                                         &has_cursor_planes);
-      if (!has_cursor_planes)
+                                         crtc_supports_hw_cursor,
+                                         &supports_hw_cursor);
+      if (!supports_hw_cursor)
         return FALSE;
     }
 
@@ -880,7 +877,7 @@ should_have_hw_cursor (MetaCursorRenderer *renderer,
         return FALSE;
     }
 
-  if (!crtcs_has_cursor_planes (renderer, cursor_sprite))
+  if (!crtcs_supports_hw_cursor (renderer, cursor_sprite))
     return FALSE;
 
   texture = meta_cursor_sprite_get_cogl_texture (cursor_sprite);
-- 
2.33.1


From 561ec4f3e722ea365c535aea4e03b496b20cb8c9 Mon Sep 17 00:00:00 2001
From: Daniel van Vugt <daniel.van.vugt@canonical.com>
Date: Mon, 22 Nov 2021 18:23:08 +0800
Subject: [PATCH 25/30] background-content: Anti-alias texels that intersect
 the circle boundary

Previously we chose to only anti-alias texels inside the boundary
(`clip_radius - 1.0`) but zoomed in you could see it was slightly smaller
than the correct curve (#2024).

Similarly if you choose to only anti-alias texels outside that edge
(`clip_radius + 1.0`) then you'd get an overly convex curve that doesn't
match up with the straight line sections.

So now we anti-alias texels that intersect the circle boundary, regardless
of which side they are mostly on. For efficiency we define "intersect" to
mean any texel whose center is within 0.5 of the theoretical edge.

Fixes: https://gitlab.gnome.org/GNOME/mutter/-/issues/2024
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2102>

(cherry picked from commit 858b5c12b1f55043964c2e2bd30de8cf112e76d2)
---
 src/compositor/meta-background-content.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/src/compositor/meta-background-content.c b/src/compositor/meta-background-content.c
index eeae41c62b..49f5885ca7 100644
--- a/src/compositor/meta-background-content.c
+++ b/src/compositor/meta-background-content.c
@@ -169,16 +169,17 @@ typedef enum
 "  float dist_squared = dot (delta, delta);                               \n"\
 "                                                                         \n"\
 "  // Fully outside the circle                                            \n"\
-"  if (dist_squared >= (clip_radius * clip_radius))                       \n"\
+"  float outer_radius = clip_radius + 0.5;                                \n"\
+"  if (dist_squared >= (outer_radius * outer_radius))                     \n"\
 "    return 0.0;                                                          \n"\
 "                                                                         \n"\
 "  // Fully inside the circle                                             \n"\
-"  float inner_radius = clip_radius - 1.0;                                \n"\
+"  float inner_radius = clip_radius - 0.5;                                \n"\
 "  if (dist_squared <= (inner_radius * inner_radius))                     \n"\
 "    return 1.0;                                                          \n"\
 "                                                                         \n"\
 "  // Only pixels on the edge of the curve need expensive antialiasing    \n"\
-"  return clip_radius - sqrt (dist_squared);                              \n"\
+"  return outer_radius - sqrt (dist_squared);                             \n"\
 "}                                                                        \n"
 
 #define ROUNDED_CLIP_FRAGMENT_SHADER_CODE                                    \
-- 
2.33.1


From b749a63163ab8f6dae8ea4bac08b02751f3f8507 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Quentin=20PAG=C3=88S?= <pages_quentin@hotmail.com>
Date: Sun, 28 Nov 2021 13:41:55 +0000
Subject: [PATCH 26/30] Update Occitan translation

---
 po/oc.po | 205 +++++++++++++++++++++++++++++++++----------------------
 1 file changed, 122 insertions(+), 83 deletions(-)

diff --git a/po/oc.po b/po/oc.po
index 26ebbf18d5..844622362b 100644
--- a/po/oc.po
+++ b/po/oc.po
@@ -7,8 +7,8 @@ msgid ""
 msgstr ""
 "Project-Id-Version: mutter master\n"
 "Report-Msgid-Bugs-To: https://gitlab.gnome.org/GNOME/mutter/issues\n"
-"POT-Creation-Date: 2021-05-11 18:46+0000\n"
-"PO-Revision-Date: 2021-05-11 20:45+0200\n"
+"POT-Creation-Date: 2021-11-26 16:02+0000\n"
+"PO-Revision-Date: 2021-11-28 14:40+0100\n"
 "Last-Translator: Quentin PAGÈS\n"
 "Language-Team: Tot En Òc\n"
 "Language: oc\n"
@@ -16,7 +16,7 @@ msgstr ""
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
 "Plural-Forms: nplurals=2; plural=(n > 1);\n"
-"X-Generator: Poedit 2.4.3\n"
+"X-Generator: Poedit 3.0\n"
 "X-Project-Style: gnome\n"
 
 #: data/50-mutter-navigation.xml:6
@@ -179,10 +179,6 @@ msgstr "Sistèma"
 msgid "Show the run command prompt"
 msgstr "Afichar la fenèstra per aviar una comanda"
 
-#: data/50-mutter-system.xml:10
-msgid "Show the activities overview"
-msgstr "Afichar l'apercebut de las activitats"
-
 #: data/50-mutter-wayland.xml:8
 msgid "Restore the keyboard shortcuts"
 msgstr "Restaurar los acorchis de clavièr"
@@ -425,21 +421,24 @@ msgstr ""
 
 #: data/org.gnome.mutter.gschema.xml.in:143
 msgid "Modifier to use to locate the pointer"
-msgstr ""
+msgstr "Tòca modificadora d’utilizar per localizar lo puntador"
 
 #: data/org.gnome.mutter.gschema.xml.in:144
 msgid "This key will initiate the “locate pointer” action."
-msgstr ""
+msgstr "Aquesta tòca iniciarà l’accion « localizar lo puntador »."
 
 #: data/org.gnome.mutter.gschema.xml.in:151
 msgid "Timeout for check-alive ping"
-msgstr ""
+msgstr "Relambi pel ping de verificacion d’activitat"
 
 #: data/org.gnome.mutter.gschema.xml.in:152
 msgid ""
 "Number of milliseconds a client has to respond to a ping request in order to "
 "not be detected as frozen. Using 0 will disable the alive check completely."
 msgstr ""
+"Nombre de millisegondas qu’a un client per respondre a una requèsta ping per "
+"èsser pas detectat coma blocat. L’utilizacion de 0 desactivarà complètament "
+"la verificacion."
 
 #: data/org.gnome.mutter.gschema.xml.in:176
 msgid "Select window from tab popup"
@@ -457,7 +456,7 @@ msgstr "Bascular la configuracion del monitor"
 
 #: data/org.gnome.mutter.gschema.xml.in:191
 msgid "Rotates the built-in monitor configuration"
-msgstr ""
+msgstr "Vira la configuracion d’usina del monitor"
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:12
 msgid "Switch to VT 1"
@@ -513,7 +512,7 @@ msgstr "Tornar activar los acorchis"
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:70
 msgid "Allow X11 grabs to lock keyboard focus with Xwayland"
-msgstr ""
+msgstr "Permetre a las capturas X11 de verrolhar lo focus amb Xwayland"
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:71
 msgid ""
@@ -527,10 +526,21 @@ msgid ""
 "specific X11 ClientMessage to the root window or be among the applications "
 "allowed in key “xwayland-grab-access-rules”."
 msgstr ""
+"Permetre a totes los eveniments clavièr d'èsser partits cap a las fenèstras "
+"X11 « override redirect » amb captura pendent lo foncionament amb Xwayland. "
+"Aquela opcion permet de prene en carga los clients X11 que gerisson una "
+"fenèstra « override redirect » (que recep pas de focus clavièr) e produson "
+"una captura clavièr per forçar totes los eveniments clavièr cap a aquela "
+"fenèstra. Aquela opcion es rarament utilizada e a pas cap de efièch sus las "
+"fenèstras X11 normalas que pòdon recebre lo focus del clavièr dins de "
+"circonstàncias normalas. Per que una captura X11 d'acòrdi presa en compte "
+"jos Wayland, lo client deure tanben d'acòrdi enviar un ClientMessage X11 "
+"especific a la fenèstra racina, d'acòrdi figurar demest la lista de las "
+"aplicacions autorizadas dins la clau «xwayland-grab-access-rules»."
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:90
 msgid "Xwayland applications allowed to issue keyboard grabs"
-msgstr ""
+msgstr "Aplicacions Xwayland autorizadas a emetre de capturas de clavièr"
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:91
 msgid ""
@@ -545,10 +555,20 @@ msgid ""
 "using the specific keyboard shortcut defined by the keybinding key “restore-"
 "shortcuts”."
 msgstr ""
+"Lista de noms de ressorsas o de classas de ressorsas de fenèstras X11 "
+"autorizadas o non a emetre de capturas clavièr jos Xwayland. Lo nom o la "
+"classa de ressorsa d'una fenèstra X11 donada pòt èsser obtenguda amb l'ajuda "
+"de la comanda « xprop WM_CLASS ». Los caractèrs joquèr « * » e « ? » son "
+"acceptadas dins las valors. Las valors començant per « ! » son blocadas, en "
+"prioritat respècte a la lista de las aplicacions autorizadas, per revocar "
+"las aplicacions de la lista sistèma per deca. Aquesta conten las aplicacions "
+"venentas : « @XWAYLAND_GRAB_DEFAULT_ACCESS_RULES@ ». Los utilizaires pòdon "
+"copar una captura existenta en utilizant l'acorchi clavièr especific definit "
+"per la combinason de tòcas « restore-shortcuts »."
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:116
 msgid "Disable selected X extensions in Xwayland"
-msgstr ""
+msgstr "Desactivar las extensions X seleccionadas dins Xwayland"
 
 #: data/org.gnome.mutter.wayland.gschema.xml.in:117
 msgid ""
@@ -557,27 +577,32 @@ msgid ""
 "Xwayland was built without support for the selected extensions. Xwayland "
 "needs to be restarted for this setting to take effect."
 msgstr ""
+"Aquesta opcion desactiva las extensions X seleccionadas dins Xwayland se "
+"foguèt construch amb la presa en carga de las extensions X. Aquesta opcion a "
+"pas cap d’efièch s’aquelas extensions foguèron pas inclusas dins la "
+"construccion de Xwayland. Xwayland deu èsser reaviat per prendre en compte "
+"aqueste paramètre."
 
-#: src/backends/meta-monitor.c:235
+#: src/backends/meta-monitor.c:246
 msgid "Built-in display"
 msgstr "Afichatge integrat"
 
-#: src/backends/meta-monitor.c:264
+#: src/backends/meta-monitor.c:275
 msgid "Unknown"
 msgstr "Desconegut"
 
-#: src/backends/meta-monitor.c:266
+#: src/backends/meta-monitor.c:277
 msgid "Unknown Display"
 msgstr "Afichatge desconegut"
 
-#: src/backends/meta-monitor.c:274
+#: src/backends/meta-monitor.c:285
 #, c-format
 msgctxt ""
 "This is a monitor vendor name, followed by a size in inches, like 'Dell 15\"'"
 msgid "%s %s"
 msgstr "%s %s"
 
-#: src/backends/meta-monitor.c:282
+#: src/backends/meta-monitor.c:293
 #, c-format
 msgctxt ""
 "This is a monitor vendor name followed by product/model name where size in "
@@ -590,9 +615,26 @@ msgstr "%s %s"
 msgid "Compositor"
 msgstr "Compositor"
 
+#: src/backends/x11/meta-clutter-backend-x11.c:237
+msgid "X display to use"
+msgstr "Afichatge X d'utilizar"
+
+#: src/backends/x11/meta-clutter-backend-x11.c:243
+msgid "X screen to use"
+msgstr "Ecran X d'utilizar"
+
+#: src/backends/x11/meta-clutter-backend-x11.c:248
+#: src/core/meta-context-main.c:585
+msgid "Make X calls synchronous"
+msgstr "Rendre sincròns los apèls a X"
+
+#: src/backends/x11/meta-clutter-backend-x11.c:254
+msgid "Disable XInput support"
+msgstr "Desactivar la presa en carga de XInput"
+
 #. This probably means that a non-WM compositor like xcompmgr is running;
 #. * we have no way to get it to exit
-#: src/compositor/compositor.c:510
+#: src/compositor/compositor.c:513
 #, c-format
 msgid ""
 "Another compositing manager is already running on screen %i on display “%s”."
@@ -604,94 +646,88 @@ msgstr ""
 msgid "Bell event"
 msgstr "Eveniment sonòr"
 
-#: src/core/main.c:233
-msgid "Disable connection to session manager"
-msgstr "Desactivar la connexion al gestionari de sessions"
+#. Translators: %s is a window title
+#: src/core/meta-close-dialog-default.c:151
+#, c-format
+msgid "“%s” is not responding."
+msgstr "« %s » respond pas."
+
+#: src/core/meta-close-dialog-default.c:153
+msgid "Application is not responding."
+msgstr "L'aplicacion respond pas."
+
+#: src/core/meta-close-dialog-default.c:158
+msgid ""
+"You may choose to wait a short while for it to continue or force the "
+"application to quit entirely."
+msgstr ""
+"Podètz pacientar un moment per contunhar o forçar l'aplicacion a quitar "
+"definitivament."
+
+#: src/core/meta-close-dialog-default.c:164
+msgid "_Force Quit"
+msgstr "_Forçar a quitar"
+
+#: src/core/meta-close-dialog-default.c:164
+msgid "_Wait"
+msgstr "_Esperar"
 
-#: src/core/main.c:239
+#: src/core/meta-context-main.c:555
 msgid "Replace the running window manager"
 msgstr "Remplaçar lo gestionari de fenèstras en cors de foncionament"
 
-#: src/core/main.c:245
-msgid "Specify session management ID"
-msgstr "Indicar l'ID de gestion de sessions"
-
-#: src/core/main.c:250
+#: src/core/meta-context-main.c:561
 msgid "X Display to use"
 msgstr "Afichatge X d'utilizar"
 
-#: src/core/main.c:256
+#: src/core/meta-context-main.c:567
+msgid "Disable connection to session manager"
+msgstr "Desactivar la connexion al gestionari de sessions"
+
+#: src/core/meta-context-main.c:573
+msgid "Specify session management ID"
+msgstr "Indicar l'ID de gestion de sessions"
+
+#: src/core/meta-context-main.c:579
 msgid "Initialize session from savefile"
 msgstr "Inicializar la session dempuèi lo fichièr de salvament"
 
-#: src/core/main.c:262
-msgid "Make X calls synchronous"
-msgstr "Rendre sincròns los apèls a X"
-
-#: src/core/main.c:269
+#: src/core/meta-context-main.c:592
 msgid "Run as a wayland compositor"
 msgstr "Aviar coma un compositor wayland"
 
-#: src/core/main.c:275
+#: src/core/meta-context-main.c:598
 msgid "Run as a nested compositor"
 msgstr "Executar coma un compositor imbricat"
 
-#: src/core/main.c:281
+#: src/core/meta-context-main.c:604
 msgid "Run wayland compositor without starting Xwayland"
 msgstr "Executar lo compositor wayland sens aviar Xwayland"
 
-#: src/core/main.c:287
+#: src/core/meta-context-main.c:610
 msgid "Specify Wayland display name to use"
 msgstr "Indicar lo nom d'afichar per Wayland"
 
-#: src/core/main.c:295
+#: src/core/meta-context-main.c:618
 msgid "Run as a full display server, rather than nested"
 msgstr "Aviar coma un servidor d'afichatge complet, puslèu qu'imbricat"
 
-#: src/core/main.c:300
-#, fuzzy
-#| msgid "Run as a full display server, rather than nested"
+#: src/core/meta-context-main.c:623
 msgid "Run as a headless display server"
-msgstr "Aviar coma un servidor d'afichatge complet, puslèu qu'imbricat"
+msgstr "Aviar coma un servidor sens afichatge"
 
-#: src/core/main.c:305
+#: src/core/meta-context-main.c:628
 msgid "Add persistent virtual monitor (WxH or WxH@R)"
 msgstr "Apondre un monitor virtual persistant (WxH o WxH@R)"
 
-#: src/core/main.c:311
+#: src/core/meta-context-main.c:639
 msgid "Run with X11 backend"
 msgstr "Lançar amb lo motor X11"
 
-#. Translators: %s is a window title
-#: src/core/meta-close-dialog-default.c:151
-#, c-format
-msgid "“%s” is not responding."
-msgstr "« %s » respond pas."
-
-#: src/core/meta-close-dialog-default.c:153
-msgid "Application is not responding."
-msgstr "L'aplicacion respond pas."
-
-#: src/core/meta-close-dialog-default.c:158
-msgid ""
-"You may choose to wait a short while for it to continue or force the "
-"application to quit entirely."
-msgstr ""
-"Podètz pacientar un moment per contunhar o forçar l'aplicacion a quitar "
-"definitivament."
-
-#: src/core/meta-close-dialog-default.c:165
-msgid "_Force Quit"
-msgstr "_Forçar a quitar"
-
-#: src/core/meta-close-dialog-default.c:165
-msgid "_Wait"
-msgstr "_Esperar"
-
 #. TRANSLATORS: This string refers to a button that switches between
 #. * different modes.
 #.
-#: src/core/meta-pad-action-mapper.c:780
+#: src/core/meta-pad-action-mapper.c:782
 #, c-format
 msgid "Mode Switch (Group %d)"
 msgstr "Cambiament de mòde (grop %d)"
@@ -699,28 +735,28 @@ msgstr "Cambiament de mòde (grop %d)"
 #. TRANSLATORS: This string refers to an action, cycles drawing tablets'
 #. * mapping through the available outputs.
 #.
-#: src/core/meta-pad-action-mapper.c:803
+#: src/core/meta-pad-action-mapper.c:805
 msgid "Switch monitor"
 msgstr "Cambiar de monitor"
 
-#: src/core/meta-pad-action-mapper.c:805
+#: src/core/meta-pad-action-mapper.c:807
 msgid "Show on-screen help"
 msgstr "Afichar l’ajuda a l’ecran"
 
-#: src/core/mutter.c:46
+#: src/core/mutter.c:48
 msgid "Print version"
 msgstr "Imprimir la version"
 
-#: src/core/mutter.c:52
+#: src/core/mutter.c:54
 msgid "Mutter plugin to use"
 msgstr "Empeuton de Mutter d'utilizar"
 
-#: src/core/prefs.c:1912
+#: src/core/prefs.c:1913
 #, c-format
 msgid "Workspace %d"
 msgstr "Espaci de trabalh %d"
 
-#: src/core/util.c:117
+#: src/core/util.c:148
 msgid "Mutter was compiled without support for verbose mode"
 msgstr "Mutter es estat compilat sens la presa en carga del mòde verbós"
 
@@ -729,7 +765,7 @@ msgstr "Mutter es estat compilat sens la presa en carga del mòde verbós"
 msgid "Mode Switch: Mode %d"
 msgstr "Cambiament de mòde : mòde %d"
 
-#: src/x11/meta-x11-display.c:676
+#: src/x11/meta-x11-display.c:673
 #, c-format
 msgid ""
 "Display “%s” already has a window manager; try using the --replace option to "
@@ -738,16 +774,16 @@ msgstr ""
 "L'afichatge « %s » a ja un gestionari de fenèstras ; ensajatz d'utilizar "
 "l'opcion --replace per remplaçar lo gestionari de fenèstras actual."
 
-#: src/x11/meta-x11-display.c:1097
+#: src/x11/meta-x11-display.c:1067
 msgid "Failed to initialize GDK"
 msgstr "Impossible d'inicializar GDK"
 
-#: src/x11/meta-x11-display.c:1121
+#: src/x11/meta-x11-display.c:1091
 #, c-format
 msgid "Failed to open X Window System display “%s”"
 msgstr "Impossible de dobrir l'afichatge « %s » del sistèma X Window"
 
-#: src/x11/meta-x11-display.c:1204
+#: src/x11/meta-x11-display.c:1175
 #, c-format
 msgid "Screen %d on display “%s” is invalid"
 msgstr "L'ecran %d sus l'afichatge « %s » es pas valid"
@@ -757,7 +793,7 @@ msgstr "L'ecran %d sus l'afichatge « %s » es pas valid"
 msgid "Format %s not supported"
 msgstr "Lo format %s es pas pres en carga"
 
-#: src/x11/session.c:1822
+#: src/x11/session.c:1845
 msgid ""
 "These windows do not support “save current setup” and will have to be "
 "restarted manually next time you log in."
@@ -771,6 +807,9 @@ msgstr ""
 msgid "%s (on %s)"
 msgstr "%s (sus %s)"
 
+#~ msgid "Show the activities overview"
+#~ msgstr "Afichar l'apercebut de las activitats"
+
 #~ msgid "Toggle shaded state"
 #~ msgstr "Bascular l'estat de replec"
 
-- 
2.33.1


From ec860c93e54ba5d73dd321613a09edd7c6217ac0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <corentin@elementary.io>
Date: Wed, 24 Nov 2021 23:25:12 +0100
Subject: [PATCH 27/30] clutter/actor: Add missing nullable annotations

Also change all the deprecated allow-none into optional or nullable.



(cherry picked from commit 62ab4c09d9badad00d81178e1af818c7222e0597)

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2119>
---
 clutter/clutter/clutter-actor.c | 155 +++++++++++++++++---------------
 1 file changed, 82 insertions(+), 73 deletions(-)

diff --git a/clutter/clutter/clutter-actor.c b/clutter/clutter/clutter-actor.c
index 929ac7b63e..3a29c43ef2 100644
--- a/clutter/clutter/clutter-actor.c
+++ b/clutter/clutter/clutter-actor.c
@@ -2706,7 +2706,7 @@ clutter_actor_real_queue_relayout (ClutterActor *self)
 /**
  * clutter_actor_apply_relative_transform_to_point:
  * @self: A #ClutterActor
- * @ancestor: (allow-none): A #ClutterActor ancestor, or %NULL to use the
+ * @ancestor: (nullable): A #ClutterActor ancestor, or %NULL to use the
  *   default #ClutterStage
  * @point: A point as #graphene_point3d_t
  * @vertex: (out caller-allocates): The translated #graphene_point3d_t
@@ -4504,11 +4504,11 @@ clutter_actor_set_translation (ClutterActor *self,
 /**
  * clutter_actor_get_translation:
  * @self: a #ClutterActor
- * @translate_x: (out) (allow-none): return location for the X component
+ * @translate_x: (out) (optional): return location for the X component
  *   of the translation, or %NULL
- * @translate_y: (out) (allow-none): return location for the Y component
+ * @translate_y: (out) (optional): return location for the Y component
  *   of the translation, or %NULL
- * @translate_z: (out) (allow-none): return location for the Z component
+ * @translate_z: (out) (optional): return location for the Z component
  *   of the translation, or %NULL
  *
  * Retrieves the translation set using clutter_actor_set_translation().
@@ -5782,7 +5782,7 @@ clutter_actor_real_get_paint_volume (ClutterActor       *self,
  * cannot chain up to the parent implementation when computing their
  * paint volume.
  *
- * Return value: (transfer none): a pointer to the default
+ * Return value: (transfer none) (nullable): a pointer to the default
  *   #ClutterPaintVolume, relative to the #ClutterActor, or %NULL if
  *   the actor could not compute a valid paint volume. The returned value
  *   is not guaranteed to be stable across multiple frames, so if you
@@ -7359,7 +7359,7 @@ clutter_actor_class_init (ClutterActorClass *klass)
   /**
    * ClutterActor::parent-set:
    * @actor: the object which received the signal
-   * @old_parent: (allow-none): the previous parent of the actor, or %NULL
+   * @old_parent: (nullable): the previous parent of the actor, or %NULL
    *
    * This signal is emitted when the parent of the actor changes.
    *
@@ -8163,7 +8163,7 @@ _clutter_actor_queue_only_relayout (ClutterActor *self)
 /**
  * clutter_actor_queue_redraw_with_clip:
  * @self: a #ClutterActor
- * @clip: (allow-none): a rectangular clip region, or %NULL
+ * @clip: (nullable): a rectangular clip region, or %NULL
  *
  * Queues a redraw on @self limited to a specific, actor-relative
  * rectangular area.
@@ -8227,13 +8227,13 @@ clutter_actor_queue_relayout (ClutterActor *self)
 /**
  * clutter_actor_get_preferred_size:
  * @self: a #ClutterActor
- * @min_width_p: (out) (allow-none): return location for the minimum
+ * @min_width_p: (out) (optional): return location for the minimum
  *   width, or %NULL
- * @min_height_p: (out) (allow-none): return location for the minimum
+ * @min_height_p: (out) (optional): return location for the minimum
  *   height, or %NULL
- * @natural_width_p: (out) (allow-none): return location for the natural
+ * @natural_width_p: (out) (optional): return location for the natural
  *   width, or %NULL
- * @natural_height_p: (out) (allow-none): return location for the natural
+ * @natural_height_p: (out) (optional): return location for the natural
  *   height, or %NULL
  *
  * Computes the preferred minimum and natural size of an actor, taking into
@@ -8599,9 +8599,9 @@ clutter_actor_update_preferred_size_for_constraints (ClutterActor *self,
  * @self: A #ClutterActor
  * @for_height: available height when computing the preferred width,
  *   or a negative value to indicate that no height is defined
- * @min_width_p: (out) (allow-none): return location for minimum width,
+ * @min_width_p: (out) (optional): return location for minimum width,
  *   or %NULL
- * @natural_width_p: (out) (allow-none): return location for the natural
+ * @natural_width_p: (out) (optional): return location for the natural
  *   width, or %NULL
  *
  * Computes the requested minimum and natural widths for an actor,
@@ -8765,9 +8765,9 @@ clutter_actor_get_preferred_width (ClutterActor *self,
  * @self: A #ClutterActor
  * @for_width: available width to assume in computing desired height,
  *   or a negative value to indicate that no width is defined
- * @min_height_p: (out) (allow-none): return location for minimum height,
+ * @min_height_p: (out) (optional): return location for minimum height,
  *   or %NULL
- * @natural_height_p: (out) (allow-none): return location for natural
+ * @natural_height_p: (out) (optional): return location for natural
  *   height, or %NULL
  *
  * Computes the requested minimum and natural heights for an actor,
@@ -9861,8 +9861,8 @@ clutter_actor_set_size (ClutterActor *self,
 /**
  * clutter_actor_get_size:
  * @self: A #ClutterActor
- * @width: (out) (allow-none): return location for the width, or %NULL.
- * @height: (out) (allow-none): return location for the height, or %NULL.
+ * @width: (out) (optional): return location for the width, or %NULL.
+ * @height: (out) (optional): return location for the height, or %NULL.
  *
  * This function tries to "do what you mean" and return
  * the size an actor will have. If the actor has a valid
@@ -9893,8 +9893,8 @@ clutter_actor_get_size (ClutterActor *self,
 /**
  * clutter_actor_get_position:
  * @self: a #ClutterActor
- * @x: (out) (allow-none): return location for the X coordinate, or %NULL
- * @y: (out) (allow-none): return location for the Y coordinate, or %NULL
+ * @x: (out) (optional): return location for the X coordinate, or %NULL
+ * @y: (out) (optional): return location for the Y coordinate, or %NULL
  *
  * This function tries to "do what you mean" and tell you where the
  * actor is, prior to any transformations. Retrieves the fixed
@@ -9923,8 +9923,8 @@ clutter_actor_get_position (ClutterActor *self,
 /**
  * clutter_actor_get_fixed_position:
  * @self: a #ClutterActor
- * @x: (out) (allow-none): return location for the X coordinate, or %NULL
- * @y: (out) (allow-none): return location for the Y coordinate, or %NULL
+ * @x: (out) (optional): return location for the X coordinate, or %NULL
+ * @y: (out) (optional): return location for the Y coordinate, or %NULL
  *
  * This function gets the fixed position of the actor, if set. If there
  * is no fixed position set, this function returns %FALSE and doesn't set
@@ -9992,8 +9992,8 @@ clutter_actor_get_transformed_extents (ClutterActor    *self,
 /**
  * clutter_actor_get_transformed_position:
  * @self: A #ClutterActor
- * @x: (out) (allow-none): return location for the X coordinate, or %NULL
- * @y: (out) (allow-none): return location for the Y coordinate, or %NULL
+ * @x: (out) (optional): return location for the X coordinate, or %NULL
+ * @y: (out) (optional): return location for the Y coordinate, or %NULL
  *
  * Gets the absolute position of an actor, in pixels relative to the stage.
  *
@@ -10020,8 +10020,8 @@ clutter_actor_get_transformed_position (ClutterActor *self,
 /**
  * clutter_actor_get_transformed_size:
  * @self: A #ClutterActor
- * @width: (out) (allow-none): return location for the width, or %NULL
- * @height: (out) (allow-none): return location for the height, or %NULL
+ * @width: (out) (optional): return location for the width, or %NULL
+ * @height: (out) (optional): return location for the height, or %NULL
  *
  * Gets the absolute size of an actor in pixels, taking into account the
  * scaling factors.
@@ -10604,9 +10604,9 @@ clutter_actor_set_scale_z (ClutterActor *self,
 /**
  * clutter_actor_get_scale:
  * @self: A #ClutterActor
- * @scale_x: (out) (allow-none): Location to store horizontal
+ * @scale_x: (out) (optional): Location to store horizontal
  *   scale factor, or %NULL.
- * @scale_y: (out) (allow-none): Location to store vertical
+ * @scale_y: (out) (optional): Location to store vertical
  *   scale factor, or %NULL.
  *
  * Retrieves an actors scale factors.
@@ -10895,7 +10895,7 @@ clutter_actor_get_offscreen_redirect (ClutterActor *self)
 /**
  * clutter_actor_set_name:
  * @self: A #ClutterActor
- * @name: Textual tag to apply to actor
+ * @name: (nullable): Textual tag to apply to actor
  *
  * Sets the given name to @self. The name can be used to identify
  * a #ClutterActor.
@@ -10918,8 +10918,8 @@ clutter_actor_set_name (ClutterActor *self,
  *
  * Retrieves the name of @self.
  *
- * Return value: the name of the actor, or %NULL. The returned string is
- *   owned by the actor and should not be modified or freed.
+ * Return value: (nullable): the name of the actor, or %NULL. The returned
+ *   string is owned by the actor and should not be modified or freed.
  */
 const gchar *
 clutter_actor_get_name (ClutterActor *self)
@@ -11027,9 +11027,9 @@ clutter_actor_set_pivot_point (ClutterActor *self,
 /**
  * clutter_actor_get_pivot_point:
  * @self: a #ClutterActor
- * @pivot_x: (out) (allow-none): return location for the normalized X
+ * @pivot_x: (out) (optional): return location for the normalized X
  *   coordinate of the pivot point, or %NULL
- * @pivot_y: (out) (allow-none): return location for the normalized Y
+ * @pivot_y: (out) (optional): return location for the normalized Y
  *   coordinate of the pivot point, or %NULL
  *
  * Retrieves the coordinates of the #ClutterActor:pivot-point.
@@ -11189,13 +11189,13 @@ clutter_actor_has_clip (ClutterActor *self)
 /**
  * clutter_actor_get_clip:
  * @self: a #ClutterActor
- * @xoff: (out) (allow-none): return location for the X offset of
+ * @xoff: (out) (optional): return location for the X offset of
  *   the clip rectangle, or %NULL
- * @yoff: (out) (allow-none): return location for the Y offset of
+ * @yoff: (out) (optional): return location for the Y offset of
  *   the clip rectangle, or %NULL
- * @width: (out) (allow-none): return location for the width of
+ * @width: (out) (optional): return location for the width of
  *   the clip rectangle, or %NULL
- * @height: (out) (allow-none): return location for the height of
+ * @height: (out) (optional): return location for the height of
  *   the clip rectangle, or %NULL
  *
  * Gets the clip area for @self, if any is set.
@@ -11779,7 +11779,7 @@ clutter_actor_insert_child_at_index (ClutterActor *self,
  * clutter_actor_insert_child_above:
  * @self: a #ClutterActor
  * @child: a #ClutterActor
- * @sibling: (allow-none): a child of @self, or %NULL
+ * @sibling: (nullable): a child of @self, or %NULL
  *
  * Inserts @child into the list of children of @self, above another
  * child of @self or, if @sibling is %NULL, above all the children
@@ -11820,7 +11820,7 @@ clutter_actor_insert_child_above (ClutterActor *self,
  * clutter_actor_insert_child_below:
  * @self: a #ClutterActor
  * @child: a #ClutterActor
- * @sibling: (allow-none): a child of @self, or %NULL
+ * @sibling: (nullable): a child of @self, or %NULL
  *
  * Inserts @child into the list of children of @self, below another
  * child of @self or, if @sibling is %NULL, below all the children
@@ -11863,7 +11863,7 @@ clutter_actor_insert_child_below (ClutterActor *self,
  *
  * Retrieves the parent of @self.
  *
- * Return Value: (transfer none): The #ClutterActor parent, or %NULL
+ * Return Value: (transfer none) (nullable): The #ClutterActor parent, or %NULL
  *  if no parent is set
  */
 ClutterActor *
@@ -12119,7 +12119,7 @@ clutter_actor_contains (ClutterActor *self,
  * clutter_actor_set_child_above_sibling:
  * @self: a #ClutterActor
  * @child: a #ClutterActor child of @self
- * @sibling: (allow-none): a #ClutterActor child of @self, or %NULL
+ * @sibling: (nullable): a #ClutterActor child of @self, or %NULL
  *
  * Sets @child to be above @sibling in the list of children of @self.
  *
@@ -12171,7 +12171,7 @@ clutter_actor_set_child_above_sibling (ClutterActor *self,
  * clutter_actor_set_child_below_sibling:
  * @self: a #ClutterActor
  * @child: a #ClutterActor child of @self
- * @sibling: (allow-none): a #ClutterActor child of @self, or %NULL
+ * @sibling: (nullable): a #ClutterActor child of @self, or %NULL
  *
  * Sets @child to be below @sibling in the list of children of @self.
  *
@@ -13322,8 +13322,8 @@ clutter_animatable_iface_init (ClutterAnimatableInterface *iface)
  * @self: A #ClutterActor
  * @x: (in): x screen coordinate of the point to unproject
  * @y: (in): y screen coordinate of the point to unproject
- * @x_out: (out): return location for the unprojected x coordinance
- * @y_out: (out): return location for the unprojected y coordinance
+ * @x_out: (out) (nullable): return location for the unprojected x coordinance
+ * @y_out: (out) (nullable): return location for the unprojected y coordinance
  *
  * This function translates screen coordinates (@x, @y) to
  * coordinates relative to the actor. For example, it can be used to translate
@@ -14040,7 +14040,7 @@ clutter_actor_create_pango_context (ClutterActor *self)
 /**
  * clutter_actor_create_pango_layout:
  * @self: a #ClutterActor
- * @text: (allow-none): the text to set on the #PangoLayout, or %NULL
+ * @text: (nullable): the text to set on the #PangoLayout, or %NULL
  *
  * Creates a new #PangoLayout from the same #PangoContext used
  * by the #ClutterActor. The #PangoLayout is already configured
@@ -14399,7 +14399,7 @@ clutter_actor_set_transform_internal (ClutterActor            *self,
 /**
  * clutter_actor_set_transform:
  * @self: a #ClutterActor
- * @transform: (allow-none): a #graphene_matrix_t, or %NULL to
+ * @transform: (nullable): a #graphene_matrix_t, or %NULL to
  *   unset a custom transformation
  *
  * Overrides the transformations of a #ClutterActor with a custom
@@ -14860,7 +14860,7 @@ clutter_actor_get_actions (ClutterActor *self)
  * Retrieves the #ClutterAction with the given name in the list
  * of actions applied to @self
  *
- * Return value: (transfer none): a #ClutterAction for the given
+ * Return value: (transfer none) (nullable): a #ClutterAction for the given
  *   name, or %NULL. The returned #ClutterAction is owned by the
  *   actor and it should not be unreferenced directly
  *
@@ -15068,7 +15068,7 @@ clutter_actor_get_constraints (ClutterActor *self)
  * Retrieves the #ClutterConstraint with the given name in the list
  * of constraints applied to @self
  *
- * Return value: (transfer none): a #ClutterConstraint for the given
+ * Return value: (transfer none) (nullable): a #ClutterConstraint for the given
  *   name, or %NULL. The returned #ClutterConstraint is owned by the
  *   actor and it should not be unreferenced directly
  *
@@ -15311,7 +15311,7 @@ clutter_actor_get_effects (ClutterActor *self)
  * Retrieves the #ClutterEffect with the given name in the list
  * of effects applied to @self
  *
- * Return value: (transfer none): a #ClutterEffect for the given
+ * Return value: (transfer none) (nullable): a #ClutterEffect for the given
  *   name, or %NULL. The returned #ClutterEffect is owned by the
  *   actor and it should not be unreferenced directly
  *
@@ -15543,7 +15543,7 @@ _clutter_actor_get_paint_volume_mutable (ClutterActor *self)
  * should ensure that their volume has a depth of 0. (This will be true
  * as long as you don't call clutter_paint_volume_set_depth().)
  *
- * Return value: (transfer none): a pointer to a #ClutterPaintVolume,
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterPaintVolume,
  *   or %NULL if no volume could be determined. The returned pointer
  *   is not guaranteed to be valid across multiple frames; if you want
  *   to keep it, you will need to copy it using clutter_paint_volume_copy().
@@ -15576,7 +15576,7 @@ clutter_actor_get_paint_volume (ClutterActor *self)
  * transformed paint volume of all of its children and union them
  * together using clutter_paint_volume_union().
  *
- * Return value: (transfer none): a pointer to a #ClutterPaintVolume,
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterPaintVolume,
  *   or %NULL if no volume could be determined. The returned pointer is
  *   not guaranteed to be valid across multiple frames; if you wish to
  *   keep it, you will have to copy it using clutter_paint_volume_copy().
@@ -15983,13 +15983,13 @@ clutter_actor_is_effectively_on_stage_view (ClutterActor     *self,
 /**
  * clutter_actor_pick_frame_clock: (skip)
  * @self: a #ClutterActor
- * @out_actor: (nullable): a pointer to an #ClutterActor
+ * @out_actor: (out) (nullable) (optional): a pointer to an #ClutterActor
  *
  * Pick the most suitable frame clock for driving animations for this actor.
  *
  * The #ClutterActor used for picking the frame clock is written @out_actor.
  *
- * Returns: (transfer none): a #ClutterFrameClock
+ * Returns: (transfer none) (nullable): a #ClutterFrameClock
  */
 ClutterFrameClock *
 clutter_actor_pick_frame_clock (ClutterActor  *self,
@@ -16158,7 +16158,8 @@ clutter_actor_get_n_children (ClutterActor *self)
  * Retrieves the actor at the given @index_ inside the list of
  * children of @self.
  *
- * Return value: (transfer none): a pointer to a #ClutterActor, or %NULL
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterActor,
+ *   or %NULL
  *
  * Since: 1.10
  */
@@ -16375,7 +16376,7 @@ on_layout_manager_changed (ClutterLayoutManager *manager,
 /**
  * clutter_actor_set_layout_manager:
  * @self: a #ClutterActor
- * @manager: (allow-none): a #ClutterLayoutManager, or %NULL to unset it
+ * @manager: (nullable): a #ClutterLayoutManager, or %NULL to unset it
  *
  * Sets the #ClutterLayoutManager delegate object that will be used to
  * lay out the children of @self.
@@ -16428,8 +16429,8 @@ clutter_actor_set_layout_manager (ClutterActor         *self,
  *
  * Retrieves the #ClutterLayoutManager used by @self.
  *
- * Return value: (transfer none): a pointer to the #ClutterLayoutManager,
- *   or %NULL
+ * Return value: (transfer none) (nullable): a pointer to the
+ *   #ClutterLayoutManager, or %NULL
  *
  * Since: 1.10
  */
@@ -16466,7 +16467,8 @@ layout_info_free (gpointer data)
  *
  * If the actor does not have a ClutterLayoutInfo associated to it, %NULL is returned.
  *
- * Return value: (transfer none): a pointer to the ClutterLayoutInfo structure
+ * Return value: (transfer none) (nullable): a pointer to the ClutterLayoutInfo
+ *   structure
  */
 ClutterLayoutInfo *
 _clutter_actor_peek_layout_info (ClutterActor *self)
@@ -16521,7 +16523,8 @@ _clutter_actor_get_layout_info (ClutterActor *self)
  *
  * This function should only be used for getters.
  *
- * Return value: a const pointer to the ClutterLayoutInfo structure
+ * Return value: (transfer none): a const pointer to the ClutterLayoutInfo
+ *   structure
  */
 const ClutterLayoutInfo *
 _clutter_actor_get_layout_info_or_defaults (ClutterActor *self)
@@ -16931,7 +16934,7 @@ clutter_actor_set_background_color_internal (ClutterActor *self,
 /**
  * clutter_actor_set_background_color:
  * @self: a #ClutterActor
- * @color: (allow-none): a #ClutterColor, or %NULL to unset a previously
+ * @color: (nullable): a #ClutterColor, or %NULL to unset a previously
  *  set color
  *
  * Sets the background color of a #ClutterActor.
@@ -17003,7 +17006,8 @@ clutter_actor_get_background_color (ClutterActor *self,
  * is not safe to modify the list of children of @self while iterating
  * it.
  *
- * Return value: (transfer none): a pointer to a #ClutterActor, or %NULL
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterActor,
+ *   or %NULL
  *
  * Since: 1.10
  */
@@ -17026,7 +17030,8 @@ clutter_actor_get_previous_sibling (ClutterActor *self)
  * is not safe to modify the list of children of @self while iterating
  * it.
  *
- * Return value: (transfer none): a pointer to a #ClutterActor, or %NULL
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterActor,
+ *   or %NULL
  *
  * Since: 1.10
  */
@@ -17048,7 +17053,8 @@ clutter_actor_get_next_sibling (ClutterActor *self)
  * is not safe to modify the list of children of @self while iterating
  * it.
  *
- * Return value: (transfer none): a pointer to a #ClutterActor, or %NULL
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterActor,
+ *   or %NULL
  *
  * Since: 1.10
  */
@@ -17070,7 +17076,8 @@ clutter_actor_get_first_child (ClutterActor *self)
  * is not safe to modify the list of children of @self while iterating
  * it.
  *
- * Return value: (transfer none): a pointer to a #ClutterActor, or %NULL
+ * Return value: (transfer none) (nullable): a pointer to a #ClutterActor,
+ *   or %NULL
  *
  * Since: 1.10
  */
@@ -17163,7 +17170,8 @@ clutter_actor_iter_is_valid (const ClutterActorIter *iter)
 /**
  * clutter_actor_iter_next:
  * @iter: a #ClutterActorIter
- * @child: (out) (transfer none): return location for a #ClutterActor
+ * @child: (out) (transfer none) (optional) (nullable): return location for a
+ * #ClutterActor
  *
  * Advances the @iter and retrieves the next child of the root #ClutterActor
  * that was used to initialize the #ClutterActorIterator.
@@ -17204,7 +17212,8 @@ clutter_actor_iter_next (ClutterActorIter  *iter,
 /**
  * clutter_actor_iter_prev:
  * @iter: a #ClutterActorIter
- * @child: (out) (transfer none): return location for a #ClutterActor
+ * @child: (out) (transfer none) (optional) (nullable): return location for a
+ *   #ClutterActor
  *
  * Advances the @iter and retrieves the previous child of the root
  * #ClutterActor that was used to initialize the #ClutterActorIterator.
@@ -18054,8 +18063,8 @@ clutter_actor_get_easing_delay (ClutterActor *self)
  * you should use the #ClutterActor::transition-stopped signal, using the
  * transition name as the signal detail.
  *
- * Return value: (transfer none): a #ClutterTransition, or %NULL is none
- *   was found to match the passed name; the returned instance is owned
+ * Return value: (transfer none) (nullable): a #ClutterTransition, or %NULL if
+ *   none was found to match the passed name; the returned instance is owned
  *   by Clutter and it should not be freed
  *
  * Since: 1.10
@@ -18174,7 +18183,7 @@ clutter_actor_restore_easing_state (ClutterActor *self)
 /**
  * clutter_actor_set_content:
  * @self: a #ClutterActor
- * @content: (allow-none): a #ClutterContent, or %NULL
+ * @content: (nullable): a #ClutterContent, or %NULL
  *
  * Sets the contents of a #ClutterActor.
  *
@@ -18252,8 +18261,8 @@ clutter_actor_set_content (ClutterActor   *self,
  *
  * Retrieves the contents of @self.
  *
- * Return value: (transfer none): a pointer to the #ClutterContent instance,
- *   or %NULL if none was set
+ * Return value: (transfer none) (nullable): a pointer to the #ClutterContent
+ *   instance, or %NULL if none was set
  *
  * Since: 1.10
  */
@@ -18583,9 +18592,9 @@ clutter_actor_set_content_scaling_filters (ClutterActor         *self,
 /**
  * clutter_actor_get_content_scaling_filters:
  * @self: a #ClutterActor
- * @min_filter: (out) (allow-none): return location for the minification
+ * @min_filter: (out) (optional): return location for the minification
  *   filter, or %NULL
- * @mag_filter: (out) (allow-none): return location for the magnification
+ * @mag_filter: (out) (optional): return location for the magnification
  *   filter, or %NULL
  *
  * Retrieves the values set using clutter_actor_set_content_scaling_filters().
@@ -19005,7 +19014,7 @@ clutter_actor_set_child_transform_internal (ClutterActor            *self,
 /**
  * clutter_actor_set_child_transform:
  * @self: a #ClutterActor
- * @transform: (allow-none): a #graphene_matrix_t, or %NULL
+ * @transform: (nullable): a #graphene_matrix_t, or %NULL
  *
  * Sets the transformation matrix to be applied to all the children
  * of @self prior to their own transformations. The default child
-- 
2.33.1


From 8e0acad2d3d576efeea703967f0f50aee10684f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20=C5=81opatka?= <piotr.lopatka@gmail.com>
Date: Sat, 6 Nov 2021 14:14:25 +0000
Subject: [PATCH 28/30] backend: Copy damage rectangles to secondary GPU when
 available

Systems with AMD GPUs do not take advantage of Mutter's zero-copy path
when driving DisplayLink screens. This is due to a very slow CPU access
to the zero-copy texture. Instead they fall back on primary GPU doing a
copy of the texture for fast CPU access. This commit accelerates texture
copy by working through damage regions only.

Tests on a 4K screen with windowed applications show significant
reduction of GPU utilisation.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2033>
---
 src/backends/native/meta-onscreen-native.c | 51 +++++++++++++++++-----
 1 file changed, 41 insertions(+), 10 deletions(-)

diff --git a/src/backends/native/meta-onscreen-native.c b/src/backends/native/meta-onscreen-native.c
index ca3752bcb3..47b0d7eefc 100644
--- a/src/backends/native/meta-onscreen-native.c
+++ b/src/backends/native/meta-onscreen-native.c
@@ -735,7 +735,9 @@ secondary_gpu_get_next_dumb_buffer (MetaOnscreenNativeSecondaryGpuState *seconda
 
 static gboolean
 copy_shared_framebuffer_primary_gpu (CoglOnscreen                        *onscreen,
-                                     MetaOnscreenNativeSecondaryGpuState *secondary_gpu_state)
+                                     MetaOnscreenNativeSecondaryGpuState *secondary_gpu_state,
+                                     const int                           *rectangles,
+                                     int                                  n_rectangles)
 {
   CoglFramebuffer *framebuffer = COGL_FRAMEBUFFER (onscreen);
   MetaOnscreenNative *onscreen_native = META_ONSCREEN_NATIVE (onscreen);
@@ -802,14 +804,37 @@ copy_shared_framebuffer_primary_gpu (CoglOnscreen                        *onscre
                   error->message);
       return FALSE;
     }
+  /* Limit the number of individual copies to 16 */
+#define MAX_RECTS 16
 
-  if (!cogl_blit_framebuffer (framebuffer, COGL_FRAMEBUFFER (dmabuf_fb),
-                              0, 0, 0, 0,
-                              width, height,
-                              &error))
+  if (n_rectangles == 0 || n_rectangles > MAX_RECTS)
     {
-      g_object_unref (dmabuf_fb);
-      return FALSE;
+      if (!cogl_blit_framebuffer (framebuffer, COGL_FRAMEBUFFER (dmabuf_fb),
+                                  0, 0, 0, 0,
+                                  width, height,
+                                  &error))
+        {
+          g_object_unref (dmabuf_fb);
+          return FALSE;
+        }
+    }
+  else
+    {
+      int i;
+
+      for (i = 0; i < n_rectangles; ++i)
+        {
+          if (!cogl_blit_framebuffer (framebuffer, COGL_FRAMEBUFFER (dmabuf_fb),
+                                      rectangles[i * 4], rectangles[i * 4 + 1],
+                                      rectangles[i * 4], rectangles[i * 4 + 1],
+                                      rectangles[i * 4 + 2],
+                                      rectangles[i * 4 + 3],
+                                      &error))
+            {
+              g_object_unref (dmabuf_fb);
+              return FALSE;
+            }
+        }
     }
 
   g_object_unref (dmabuf_fb);
@@ -877,7 +902,9 @@ copy_shared_framebuffer_cpu (CoglOnscreen                        *onscreen,
 }
 
 static void
-update_secondary_gpu_state_pre_swap_buffers (CoglOnscreen *onscreen)
+update_secondary_gpu_state_pre_swap_buffers (CoglOnscreen *onscreen,
+                                             const int    *rectangles,
+                                             int           n_rectangles)
 {
   MetaOnscreenNative *onscreen_native = META_ONSCREEN_NATIVE (onscreen);
   MetaOnscreenNativeSecondaryGpuState *secondary_gpu_state;
@@ -907,7 +934,9 @@ update_secondary_gpu_state_pre_swap_buffers (CoglOnscreen *onscreen)
           G_GNUC_FALLTHROUGH;
         case META_SHARED_FRAMEBUFFER_COPY_MODE_PRIMARY:
           if (!copy_shared_framebuffer_primary_gpu (onscreen,
-                                                    secondary_gpu_state))
+                                                    secondary_gpu_state,
+                                                    rectangles,
+                                                    n_rectangles))
             {
               if (!secondary_gpu_state->noted_primary_gpu_copy_failed)
                 {
@@ -1028,7 +1057,9 @@ meta_onscreen_native_swap_buffers_with_damage (CoglOnscreen  *onscreen,
   COGL_TRACE_BEGIN_SCOPED (MetaRendererNativeSwapBuffers,
                            "Onscreen (swap-buffers)");
 
-  update_secondary_gpu_state_pre_swap_buffers (onscreen);
+  update_secondary_gpu_state_pre_swap_buffers (onscreen,
+                                               rectangles,
+                                               n_rectangles);
 
   parent_class = COGL_ONSCREEN_CLASS (meta_onscreen_native_parent_class);
   parent_class->swap_buffers_with_damage (onscreen,
-- 
2.33.1


From 1f92bd1aebb671620239c398dd8ab96fe1d28116 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 2 Dec 2021 19:02:33 +0100
Subject: [PATCH 29/30] wayland/output: Always set xdg_output interface
 implementation

This avoids the following crash, that could happen in certain rare race
conditions, e.g. in tests:

  0) wl_closure_invoke (closure=0x2fbf9e0, target=0x2e5b3d0, opcode=0)
     at ../src/connection.c:1014
  1) wl_client_connection_data () at ../src/wayland-server.c:432
  2) wl_event_loop_dispatch () at ../src/event-loop.c:1027
  3) wayland_event_source_dispatch () at ../src/wayland/meta-wayland.c:104
  4) g_main_dispatch () at ../glib/gmain.c:3381

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2127>


(cherry picked from commit 7b83735aeac48514e55749e6629003b237919d23)
---
 src/wayland/meta-wayland-outputs.c | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/src/wayland/meta-wayland-outputs.c b/src/wayland/meta-wayland-outputs.c
index f8069b6929..4d07c87f78 100644
--- a/src/wayland/meta-wayland-outputs.c
+++ b/src/wayland/meta-wayland-outputs.c
@@ -645,24 +645,25 @@ meta_xdg_output_manager_get_xdg_output (struct wl_client   *client,
                                             id);
 
   wayland_output = wl_resource_get_user_data (output);
-  if (!wayland_output)
-    return;
-
   wl_resource_set_implementation (xdg_output_resource,
                                   &meta_xdg_output_interface,
                                   wayland_output, meta_xdg_output_destructor);
 
+  if (!wayland_output)
+    goto done;
+
   wayland_output->xdg_output_resources =
     g_list_prepend (wayland_output->xdg_output_resources, xdg_output_resource);
 
   if (!wayland_output->monitor)
-    return;
+    goto done;
 
   send_xdg_output_events (xdg_output_resource,
                           wayland_output,
                           wayland_output->monitor,
                           TRUE, NULL);
 
+done:
   xdg_output_version = wl_resource_get_version (xdg_output_resource);
   wl_output_version = wl_resource_get_version (output);
 
-- 
2.33.1


From 62609d7a6a7e9cfc34d4eebf2e1a7a29151810ae Mon Sep 17 00:00:00 2001
From: Pascal Nowack <Pascal.Nowack@gmx.de>
Date: Tue, 7 Dec 2021 09:33:16 +0100
Subject: [PATCH 30/30] backends/native: Stop freeing slow keys list twice

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/1225
Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2138>


(cherry picked from commit d5f2ec6f1e5589c7ce24e54be93b92010f55fdef)
---
 src/backends/native/meta-input-device-native.c | 1 -
 1 file changed, 1 deletion(-)

diff --git a/src/backends/native/meta-input-device-native.c b/src/backends/native/meta-input-device-native.c
index 468aef5576..6ee6f4961f 100644
--- a/src/backends/native/meta-input-device-native.c
+++ b/src/backends/native/meta-input-device-native.c
@@ -224,7 +224,6 @@ static void
 clear_slow_keys (MetaInputDeviceNative *device)
 {
   g_list_free_full (device->slow_keys_list, meta_input_device_native_free_pending_slow_key);
-  g_list_free (device->slow_keys_list);
   device->slow_keys_list = NULL;
 }
 
-- 
2.33.1

